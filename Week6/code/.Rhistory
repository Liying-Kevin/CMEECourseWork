for (i in 1:ncol(northChange)){
for (j in 1:ncol(northChange)){
differ <- northChange[i,] - northChange[j,]
differ <- sum(abs(differ))
}
}
northChange<-north[vector1]
ncol(northChange)
for (i in 1:ncol(northChange)){
for (j in 1:ncol(northChange)){
differ <- (northChange[i,] - northChange[j,])
differ <- sum(abs(differ))
}
}
sumDiffer <-c()
for (i in 1:nrow(northChange)){
for (j in 1:nrow(northChange)){
differ <- (northChange[i,] - northChange[j,])
differ <- sum(abs(differ))
sumDiffer <- c(sumDiffer,differ)
}
}
for (i in 1:nrow(northChange)){
for (j in 1:nrow(northChange)){
differ <- (northChange[i,] - northChange[j,])
differ <- sum(abs(differ))
sumDiffer <- sum(differ)
}
}
sumDiffer <-c()
for (i in 1:nrow(northChange)){
for (j in 1:nrow(northChange)){
differ <- (northChange[i,] - northChange[j,])
differ <- sum(abs(differ))
sumDiffer <- c(sumDiffer,differ)
sumDiffers <- sum(sumDiffer)
}
}
sumDiffer <-c()
for (i in 1:nrow(northChange)){
for (j in 1:nrow(northChange)){
differ <- (northChange[i,] - northChange[j,])
differ <- sum(abs(differ))
sumDiffer <- c(sumDiffer,differ)
sumDiffers <- sum(sumDiffer)
}
}
print(sumDiffers)
tajima <- (sumDiffers / nrow(northChange)/ (nrow(northChange)-1))
southChange<-south[vector2]
sumDiffer1 <-c()
for (i in 1:nrow(southChange)){
for (j in 1:nrow(southChange)){
differ <- (southChange[i,] - southChange[j,])
differ1 <- sum(abs(differ1))
sumDiffer1 <- c(sumDiffer1,differ1)
sumDiffers1 <- sum(sumDiffer1)
}
}
tajima1 <- (sumDiffers1 / nrow(southChange)/ (nrow(southChange)-1))
southChange<-south[vector2]
sumDiffer1 <-c()
for (i in 1:nrow(southChange)){
for (j in 1:nrow(southChange)){
differ1 <- (southChange[i,] - southChange[j,])
differ1 <- sum(abs(differ1))
sumDiffer1 <- c(sumDiffer1,differ1)
sumDiffers1 <- sum(sumDiffer1)
}
}
tajima1 <- (sumDiffers1 / nrow(southChange)/ (nrow(southChange)-1))
sumDiffer <-c()
for (i in 1:nrow(northChange)){
for (j in 1:nrow(northChange)){
differ <- (northChange[i,] - northChange[j,])
differ <- sum(abs(differ))
sumDiffer <- c(sumDiffer,differ)
sumDiffers <- sum(sumDiffer)
}
}
tajima <- (sumDiffers / nrow(northChange)/ (nrow(northChange)-1))
Ne <- (tajima / (4 * 10^{-8}))
S <- ncol(northChange)/sum(1/seq(1,nrow(northChange)))
S <- ncol(northChange)/sum(1/seq(1,(nrow(northChange)-1))
S <- ncol(northChange)/sum(1/seq(1,(nrow(northChange)-1)))
S <- ncol(northChange)/sum(1/seq(1,(nrow(northChange)-1)))
S <- ncol(northChange)/sum(1/seq(1,19))
S1 <- ncol(southChange)/sum(1/seq(1,19))
abcd <- apply(northChange,2,sum)
abcd <- colSums(northChange)
erty <- table(abcd)
plot(erty)
turtle <- read.csv("../data/turtle.csv", header=F, colClasses = rep('numeric', 2000), stringsAsFactors = F)
View(turtle)
View(turtle)
class(turtle)
distance_matrix <- dist(turtle)
tree <- hclust(distance_matrix)
plot(tree)
locations <- rep(c("A","B","C","D"), each=10)
distance_matrix <- dist(turtle)
tree <- hclust(distance_matrix)
plot(tree,labels=locations)
turtle <- as.matrix(turtle)
locations <- rep(c("A","B","C","D"), each=10)
distance_matrix <- dist(turtle)
tree <- hclust(distance_matrix)
plot(tree, labels=locations)
distance_matrix <- dist(turtle)
tree <- hclust(distance_matrix)
plot(tree)
locations <- rep(c("A","B","C","D"), each=10)
locations <- rep(c("A","B","C","D"), each=10)
distance_matrix <- dist(turtle)
tree <- hclust(distance_matrix)
plot(tree,labels = locations)
plot(tree, labels=locations)
plot(tree)
turtleGenotypes <- read.csv("../data/turtle.genotypes.csv", header=F, colClasses = rep('numeric', 2000), stringsAsFactors = F)
View(turtleGenotypes)
ncol(turtleGenotypes)
nrow(turtleGenotypes)
turtleGenotypesA<-turtleGenotypes[1:10]
View(turtleGenotypesA)
turtleGenotypesA<-turtleGenotypes[,1:10]
turtleGenotypesA<-turtleGenotypes[1:10,]
fA1 <- ((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
fA1 <- as.matrix((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
View(fA1)
Hs <- (fA1(1-fA1)+fA2(1-fA2))/2
fA1 <- as.matrix((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
fA2 <- as.matrix((apply(turtleGenotypesB, 2, sum))/nrow(turtleGenotypesB))
Hs <- (fA1(1-fA1)+fA2(1-fA2))/2
fA1 <- as.matrix((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
fA2 <- as.matrix((apply(turtleGenotypesB, 2, sum))/nrow(turtleGenotypesB))
FST <- rep(NA, length(fA1))
for(i in 1 : length(FST)){}
HS <- (fA1[i](1-fA1[i])+fA2[i](1-fA2[i]))/2
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
FST <- (HT - HS)/ HT
}
fA2 <- as.matrix((apply(turtleGenotypesB, 2, sum))/nrow(turtleGenotypesB))
turtleGenotypesA<-turtleGenotypes[1:10,]
turtleGenotypesB<-turtleGenotypes[11:20,]
turtleGenotypesC<-turtleGenotypes[21:30,]
turtleGenotypesD<-turtleGenotypes[31:40,]
fA1 <- as.matrix((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
fA2 <- as.matrix((apply(turtleGenotypesB, 2, sum))/nrow(turtleGenotypesB))
FST <- rep(NA, length(fA1))
for(i in 1 : length(FST)){}
HS <- (fA1[i](1-fA1[i])+fA2[i](1-fA2[i]))/2
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
FST <- (HT - HS)/ HT
}
fA1 <- as.matrix((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
fA2 <- as.matrix((apply(turtleGenotypesB, 2, sum))/nrow(turtleGenotypesB))
HS <- (fA1[i](1-fA1[i])+fA2[i](1-fA2[i]))/2
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
turtleGenotypesA<-turtleGenotypes[1:10,]
turtleGenotypesB<-turtleGenotypes[11:20,]
turtleGenotypesC<-turtleGenotypes[21:30,]
turtleGenotypesD<-turtleGenotypes[31:40,]
fA1 <- as.matrix((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
fA2 <- as.matrix((apply(turtleGenotypesB, 2, sum))/nrow(turtleGenotypesB))
FST <- rep(NA, length(fA1))
for(i in 1 : length(FST)){}
HS <- (fA1[i]*(1-fA1[i])+fA2[i]*(1-fA2[i]))/2
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
FST <- (HT - HS)/ HT
}
ncol(turtleGenotypes)
nrow(turtleGenotypes)
turtleGenotypesA<-turtleGenotypes[1:10,]
turtleGenotypesB<-turtleGenotypes[11:20,]
turtleGenotypesC<-turtleGenotypes[21:30,]
turtleGenotypesD<-turtleGenotypes[31:40,]
fA1 <- as.matrix((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
fA2 <- as.matrix((apply(turtleGenotypesB, 2, sum))/nrow(turtleGenotypesB))
FST <- rep(NA, length(fA1))
for(i in 1 : length(FST)){
HS <- (fA1[i]*(1-fA1[i])+fA2[i]*(1-fA2[i]))/2
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
FST <- (HT - HS)/ HT
}
fA1 <- as.matrix((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
fA2 <- as.matrix((apply(turtleGenotypesB, 2, sum))/nrow(turtleGenotypesB))
FST <- rep(NA, length(fA1))
for(i in 1 : length(FST)){
HS <- (fA1[i]*(1-fA1[i])+fA2[i]*(1-fA2[i]))/2
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
FST[i] <- (HT - HS)/ HT
}
class(FST)
fA1 <- as.matrix((apply(turtleGenotypesA, 2, sum))/nrow(turtleGenotypesA))
fA2 <- as.matrix((apply(turtleGenotypesB, 2, sum))/nrow(turtleGenotypesB))
FST_A&B <- rep(NA, length(fA1))
for(i in 1 : length(FST)){
HS <- (fA1[i]*(1-fA1[i])+fA2[i]*(1-fA2[i]))/2
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
FST_A&B[i] <- (HT - HS)/ HT
}
FST_AB <- rep(NA, length(fA1))
for(i in 1 : length(FST)){
HS <- (fA1[i]*(1-fA1[i])+fA2[i]*(1-fA2[i]))/2
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
FST_AB[i] <- (HT - HS)/ HT
}
compareLocation <- function(location1,location2){
fA1 <- as.matrix((apply(location1, 2, sum))/nrow(location1))
fA2 <- as.matrix((apply(location2, 2, sum))/nrow(location2))
FST <- rep(NA, length(fA1))
for(i in 1 : length(FST)){
HS <- (fA1[i]*(1-fA1[i])+fA2[i]*(1-fA2[i]))/2
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
FST[i] <- (HT - HS)/ HT
}
return(FST)
}
compareLocation(turtleGenotypesA,turtleGenotypesB)
A_B <- compareLocation(turtleGenotypesA,turtleGenotypesB)
A_B <- compareLocation(turtleGenotypesA,turtleGenotypesB)
A_C <- compareLocation(turtleGenotypesA,turtleGenotypesC)
A_D <- compareLocation(turtleGenotypesA,turtleGenotypesD)
B_C <- compareLocation(turtleGenotypesB,turtleGenotypesC)
B_D <- compareLocation(turtleGenotypesB,turtleGenotypesD)
C_D <- compareLocation(turtleGenotypesC,turtleGenotypesD)
j = 0
k = 0
for (i in 1:ncol(data1)){
if(length(unique(data1[,i])) == 1 & length(unique(data2[,i])) == 1){
j <- j+1
}
if((data1[1,i]) != (data2[1,i])){
k <- k+1
}
}
result <- k / j
j = 0
k = 0
for (i in 1:ncol(data1)){
if(length(unique(data1[,i])) == 1 & length(unique(data2[,i])) == 1){
j <- j+1
}
if((data1[1,i]) != (data2[1,i])){
k <- k+1
}
}
result <- k / j
j = 0
k = 0
for (i in 1:ncol(data1)){
if(length(unique(data1[,i])) == 1 & length(unique(data2[,i])) == 1){
j <- j+1
}
if((data1[1,i]) != (data2[1,i])){
k <- k+1
}
}
result <- k / j
print(result)
######calculate data1 & data2
j = 0
k = 0
for (i in 1:ncol(data1)){
if(length(unique(data1[,i])) == 1 & length(unique(data2[,i])) == 1){
j <- j+1
}
if((data1[1,i]) != (data2[1,i])){
k <- k+1
}
}
result1 <- k / j
print(result1)
######calculate data1 & data3
j = 0
k = 0
for (i in 1:ncol(data1)){
if(length(unique(data1[,i])) == 1 & length(unique(data3[,i])) == 1){
j <- j+1
}
if((data1[1,i]) != (data3[1,i])){
k <- k+1
}
}
result2 <- k / j
print(result2)
######calculate data2 & data3
j = 0
k = 0
for (i in 1:ncol(data2)){
if(length(unique(data2[,i])) == 1 & length(unique(data3[,i])) == 1){
j <- j+1
}
if((data2[1,i]) != (data3[1,i])){
k <- k+1
}
}
result3 <- k / j
print(result3)
print(result1)
print(result2)
print(result3)
# geckos
## read data for each specie
len <- 20000
data_w <- read.csv("../western_banded_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_w)
data_b <- read.csv("../bent-toed_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_b)
data_l <- read.csv("../leopard_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_l)
## calculate divergence between sequences of B and L
sites_total <- 0
sites_divergent <- 0
for (i in 1:ncol(data_b)) {
### you need to discard SNPs within each species
if (length(unique(data_b[,i]))==1 & length(unique(data_l[,i]))==1) {
sites_total <- sites_total + 1
### if different, then it's a divergent site
if (data_b[1,i] != data_l[1,i]) sites_divergent <- sites_divergent + 1
}
}
### divergence rate
div_rate_BL <- sites_divergent / sites_total
## calculate divergence between sequences of W and L
sites_total <- 0
sites_divergent <- 0
for (i in 1:ncol(data_w)) {
### you need to discard SNPs within each species
if (length(unique(data_w[,i]))==1 & length(unique(data_l[,i]))==1) {
sites_total <- sites_total + 1
### if different, then it's a divergent site
if (data_w[1,i] != data_l[1,i]) sites_divergent <- sites_divergent + 1
}
}
### divergence rate
div_rate_WL <- sites_divergent / sites_total
## calculate divergence between sequences of W and B
sites_total <- 0
sites_divergent <- 0
for (i in 1:ncol(data_w)) {
### you need to discard SNPs within each species
if (length(unique(data_w[,i]))==1 & length(unique(data_b[,i]))==1) {
sites_total <- sites_total + 1
### if different, then it's a divergent site
if (data_w[1,i] != data_b[1,i]) sites_divergent <- sites_divergent + 1
}
}
### divergence rate
div_rate_WB <- sites_divergent / sites_total
## from these divergence rates we can infer that W and B are close species while L is the outgroup
## estimate mutation rate per site per year
mut_rate <- div_rate_BL / (2 * 5e7)
## estimate divergence time
div_time <- div_rate_WB / (2 * mut_rate)
cat("\nThe two species have a divergence time of", div_time, "years.")
cat("\nThe most likely species tree is L:(W:B).")
data_w <- read.csv("../western_banded_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_w)
# geckos
## read data for each specie
len <- 20000
data_w <- read.csv("../data/western_banded_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_w)
data_b <- read.csv("../data/bent-toed_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_b)
data_l <- read.csv("../data/leopard_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_l)
## calculate divergence between sequences of B and L
sites_total <- 0
sites_divergent <- 0
for (i in 1:ncol(data_b)) {
### you need to discard SNPs within each species
if (length(unique(data_b[,i]))==1 & length(unique(data_l[,i]))==1) {
sites_total <- sites_total + 1
### if different, then it's a divergent site
if (data_b[1,i] != data_l[1,i]) sites_divergent <- sites_divergent + 1
}
}
### divergence rate
div_rate_BL <- sites_divergent / sites_total
## calculate divergence between sequences of W and L
sites_total <- 0
sites_divergent <- 0
for (i in 1:ncol(data_w)) {
### you need to discard SNPs within each species
if (length(unique(data_w[,i]))==1 & length(unique(data_l[,i]))==1) {
sites_total <- sites_total + 1
### if different, then it's a divergent site
if (data_w[1,i] != data_l[1,i]) sites_divergent <- sites_divergent + 1
}
}
### divergence rate
div_rate_WL <- sites_divergent / sites_total
## calculate divergence between sequences of W and B
sites_total <- 0
sites_divergent <- 0
for (i in 1:ncol(data_w)) {
### you need to discard SNPs within each species
if (length(unique(data_w[,i]))==1 & length(unique(data_b[,i]))==1) {
sites_total <- sites_total + 1
### if different, then it's a divergent site
if (data_w[1,i] != data_b[1,i]) sites_divergent <- sites_divergent + 1
}
}
### divergence rate
div_rate_WB <- sites_divergent / sites_total
## from these divergence rates we can infer that W and B are close species while L is the outgroup
## estimate mutation rate per site per year
mut_rate <- div_rate_BL / (2 * 5e7)
## estimate divergence time
div_time <- div_rate_WB / (2 * mut_rate)
cat("\nThe two species have a divergence time of", div_time, "years.")
cat("\nThe most likely species tree is L:(W:B).")
data_w <- read.csv("../data/western_banded_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_w)
# geckos
## read data for each specie
len <- 20000
data_w <- read.csv("../data/western_banded_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_w)
data_b <- read.csv("../data/bent-toed_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_b)
data_l <- read.csv("../data/leopard_gecko.csv", stringsAsFactors=F, header=F, colClasses=rep("character", len))
dim(data_l)
## calculate divergence between sequences of B and L
sites_total <- 0
sites_divergent <- 0
for (i in 1:ncol(data_b)) {
### you need to discard SNPs within each species
if (length(unique(data_b[,i]))==1 & length(unique(data_l[,i]))==1) {
sites_total <- sites_total + 1
### if different, then it's a divergent site
if (data_b[1,i] != data_l[1,i]) sites_divergent <- sites_divergent + 1
}
}
### divergence rate
div_rate_BL <- sites_divergent / sites_total
## calculate divergence between sequences of W and L
sites_total <- 0
sites_divergent <- 0
for (i in 1:ncol(data_w)) {
### you need to discard SNPs within each species
if (length(unique(data_w[,i]))==1 & length(unique(data_l[,i]))==1) {
sites_total <- sites_total + 1
### if different, then it's a divergent site
if (data_w[1,i] != data_l[1,i]) sites_divergent <- sites_divergent + 1
}
}
### divergence rate
div_rate_WL <- sites_divergent / sites_total
## calculate divergence between sequences of W and B
sites_total <- 0
sites_divergent <- 0
for (i in 1:ncol(data_w)) {
### you need to discard SNPs within each species
if (length(unique(data_w[,i]))==1 & length(unique(data_b[,i]))==1) {
sites_total <- sites_total + 1
### if different, then it's a divergent site
if (data_w[1,i] != data_b[1,i]) sites_divergent <- sites_divergent + 1
}
}
### divergence rate
div_rate_WB <- sites_divergent / sites_total
## from these divergence rates we can infer that W and B are close species while L is the outgroup
## estimate mutation rate per site per year
mut_rate <- div_rate_BL / (2 * 5e7)
## estimate divergence time
div_time <- div_rate_WB / (2 * mut_rate)
cat("\nThe two species have a divergence time of", div_time, "years.")
cat("\nThe most likely species tree is L:(W:B).")
div_rate_WB
div_rate_WL
div_rate_BL
result1
data1 <- read.csv("../data/western_banded_gecko.csv", header=F, colClasses = rep('character', 20000), stringsAsFactors = F)
data2 <- read.csv("../data/bent-toed_gecko.csv", header=F, colClasses = rep('character', 20000), stringsAsFactors = F)
data3 <- read.csv("../data/leopard_gecko.csv", header=F, colClasses = rep('character', 20000), stringsAsFactors = F)
######calculate data1 & data2
j = 0
k = 0
for (i in 1:ncol(data1)){
if(length(unique(data1[,i])) == 1 & length(unique(data2[,i])) == 1){
j <- j+1
}
if((data1[1,i]) != (data2[1,i])){
k <- k+1
}
}
result1 <- k / j
result1
result3
A_B <- compareLocation(turtleGenotypesA,turtleGenotypesB)
A_C <- compareLocation(turtleGenotypesA,turtleGenotypesC)
A_D <- compareLocation(turtleGenotypesA,turtleGenotypesD)
B_C <- compareLocation(turtleGenotypesB,turtleGenotypesC)
B_D <- compareLocation(turtleGenotypesB,turtleGenotypesD)
C_D <- compareLocation(turtleGenotypesC,turtleGenotypesD)
mean(A_B)
mean(A_B)
mean(A_C)
print(result1)
print(result2)
print(result3)
C_D <- as.array(C_D)
C_D1 <- as.array(C_D)
C_D1 <- as.data.frame(C_D)
View(C_D1)
C_D1 <- C_D[complete.cases(C_D),]
C_D[complete.cases(C_D),]
C_D1 <- na.omit(C_D)
C_D1 <- mean(C_D, na.rm=T)
