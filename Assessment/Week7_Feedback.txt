Starting weekly assessment for Liying, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.51 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week2, Week9, .git, Week3

Found the following files in parent directory: README.txt, .gitignore, .DS_Store

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 6 weekly directories: Week1, Week2, Week3, Week6, Week7, Week9

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, Result, Data

Found the following files: README.txt, .DS_Store

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
this week learnd python and network
finish all work and store the result in the result directory.**********************************************************************

Found following files in results directory: outputFile.Rout, TestR.Rout, fmr_plot.pdf, LV_model.pdf, LV2_model.pdf, LV1.pdf, fmrR_errFile.Rout, fmrR.Rout, network.pdf, LV2.pdf, TestR_errFile.Rout, errorFile.Rout, QMEENet.svg...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 24 code files: TestR.py, regexs.py, Untitled1.ipynb, Untitled2.ipynb, profileme2.py, timeitme.py, blackbirds.py, Nets.py, TestR.R, profileme.py, fmr.R, MyFirstJupyterNb.ipynb, using_os.py, LV1.py, Untitled3.ipynb, DrawFW.py, Nets.R, Untitled.ipynb, run_fmr_R.py, LV2.py, Untitled3-checkpoint.ipynb, Untitled-checkpoint.ipynb, Untitled2-checkpoint.ipynb, Untitled1-checkpoint.ipynb

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
import subprocess
subprocess.Popen("Rscript --verbose TestR.R > ../Result/TestR.Rout 2> ../Result/TestR_errFile.Rout", shell=True).wait()**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 98

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.12449s

======================================================================
Inspecting script file regexs.py...

File contents are:
**********************************************************************
import re
my_string = "a given string"
match = re.search(r'\s', my_string)
print(match)
match.group()
match = re.search(r'\d', my_string)
print(match)

MyStr = 'an example'

match = re.search(r'\w*\s', MyStr) # what pattern is this?

if match:                      
    print('found a match:', match.group()) 
else:
    print('did not find a match')
match = re.search(r'2' , "it takes 2 to tango")
match.group()
match = re.search(r'\d' , "it takes 2 to tango")
match.group()
match = re.search(r'\d.*' , "it takes 2 to tango")
match.group()
match = re.search(r'\s\w{1,3}\s', 'once upon a time')
match.group()
match = re.search(r'\s\w*$', 'once upon a time')
match.group()
re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group()
re.search(r'^\w*.*\s', 'once upon a time').group() # 'once upon a '
re.search(r'^\w*.*?\s', 'once upon a time').group()
re.search(r'<.+>', 'This is a <EM>first</EM> test').group()
re.search(r'<.+?>', 'This is a <EM>first</EM> test').group()
re.search(r'\d*\.?\d*','1432.75+60.22i').group()
re.search(r'[AGTC]+', 'the sequence ATTCGT').group()
re.search(r'\s+[A-Z]\w+\s*\w+', "The bird-shit frog's name is Theloderma asper.").group()

MyStr = 'Samraat Pawar, s-pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s]+",MyStr)
match.group()
match = re.search(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+),\s([\w\s&]+)",MyStr)
if match:
    print(match.group(0))
    print(match.group(1))
    print(match.group(2))
    print(match.group(3))

MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a-academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a_academic@imperial.ac.uk, Some other stuff thats even more boring"
emails = re.findall(r'[\w\.-]+@[\w\.-]+', MyStr) 
for email in emails:
    print(email)**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 96

Output (only first 500 characters): 

**********************************************************************
<_sre.SRE_Match object; span=(1, 2), match=' '>
None
found a match: an 
Samraat Pawar, s-pawar@imperial.ac.uk, Systems biology and ecological theory
Samraat Pawar
s-pawar@imperial.ac.uk
Systems biology and ecological theory
s.pawar@imperial.ac.uk
a-academic@imperial.ac.uk
y.a_academic@imperial.ac.uk

**********************************************************************

Code ran without errors

Time consumed = 0.02915s

======================================================================
Inspecting script file Untitled1.ipynb...

File contents are:
**********************************************************************
{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Untitled1.ipynb...

======================================================================
Inspecting script file Untitled2.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "bad operand type for unary -: 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-c6eb8077416a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma\u001b[0m \u001b[0;34m<\u001b[0m\u001b[0;34m-\u001b[0m \u001b[0;34m\"this is R!\"\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: bad operand type for unary -: 'str'"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import scipy as sc\n",
    "\n",
    "x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "require(ggplot2)\n",
    "library(repr)# to resize plot within jupyter - this package is part of IRKernel\n",
    "options(repr.plot.width=3.3,repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y <- sin(x)\n",
    "qplot(x, y, geom = \"line\") # large figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in parse(text = x, srcfile = src): <text>:1:8: unexpected symbol\n1: import pandas\n           ^\n",
     "output_type": "error",
     "traceback": [
      "Error in parse(text = x, srcfile = src): <text>:1:8: unexpected symbol\n1: import pandas\n           ^\nTraceback:\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.25.3'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.25.3'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] File b'../Week2/data/testcsv.csv' does not exist: b'../Week2/data/testcsv.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-027207fb3b3c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mMyDF\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'../Week2/data/testcsv.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mMyDF\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    683\u001b[0m         )\n\u001b[1;32m    684\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 685\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    686\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    687\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    458\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1133\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1134\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1135\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1136\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1137\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1915\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1917\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1918\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File b'../Week2/data/testcsv.csv' does not exist: b'../Week2/data/testcsv.csv'"
     ]
    }
   ],
   "source": [
    "MyDF = pd.read_csv('../Week2/data/testcsv.csv', sep=',')\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "EOL while scanning string literal (<ipython-input-7-4aefbf2874de>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-7-4aefbf2874de>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    MyDF = pd.read_csv('/Users/kevin/CMEECourseWork/Week2/data/testcsv.csv'', sep=',')\u001b[0m\n\u001b[0m                                                                                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOL while scanning string literal\n"
     ]
    }
   ],
   "source": [
    "MyDF = pd.read_csv('/Users/kevin/CMEECourseWork/Week2/data/testcsv.csv'', sep=',')\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "EOL while scanning string literal (<ipython-input-8-4aefbf2874de>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-8-4aefbf2874de>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    MyDF = pd.read_csv('/Users/kevin/CMEECourseWork/Week2/data/testcsv.csv'', sep=',')\u001b[0m\n\u001b[0m                                                                                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOL while scanning string literal\n"
     ]
    }
   ],
   "source": [
    "MyDF = pd.read_csv('/Users/kevin/CMEECourseWork/Week2/data/testcsv.csv'', sep=',')\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Species</th>\n",
       "      <th>Infraorder</th>\n",
       "      <th>Family</th>\n",
       "      <th>Distribution</th>\n",
       "      <th>Body mass male (Kg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Daubentonia_madagascariensis</td>\n",
       "      <td>Chiromyiformes</td>\n",
       "      <td>Daubentoniidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>2.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Allocebus_trichotis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Avahi_laniger</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>1.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Avahi_occidentalis</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Avahi_unicolor</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Indridae</td>\n",
       "      <td>America</td>\n",
       "      <td>0.830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Cheirogaleus_adipicaudatus</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Cheirogaleus_crossleyi</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Cheirogaleus_major</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Cheirogaleus_medius</td>\n",
       "      <td>Lemuriformes</td>\n",
       "      <td>Cheirogaleidae</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0.217</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Species       Infraorder          Family Distribution  \\\n",
       "0  Daubentonia_madagascariensis  Chiromyiformes   Daubentoniidae   Madagascar   \n",
       "1           Allocebus_trichotis     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "2                 Avahi_laniger     Lemuriformes        Indridae      America   \n",
       "3            Avahi_occidentalis     Lemuriformes        Indridae   Madagascar   \n",
       "4                Avahi_unicolor     Lemuriformes        Indridae      America   \n",
       "5    Cheirogaleus_adipicaudatus     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "6        Cheirogaleus_crossleyi     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "7            Cheirogaleus_major     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "8           Cheirogaleus_medius     Lemuriformes  Cheirogaleidae   Madagascar   \n",
       "\n",
       "   Body mass male (Kg)  \n",
       "0                2.700  \n",
       "1                0.100  \n",
       "2                1.030  \n",
       "3                0.814  \n",
       "4                0.830  \n",
       "5                0.200  \n",
       "6                0.400  \n",
       "7                0.450  \n",
       "8                0.217  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF = pd.read_csv('../data/testcsv.csv', sep=',')\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF = pd.DataFrame({\n",
    "   'col1': ['Var1', 'Var2', 'Var3', 'Var4'],\n",
    "   'col2': ['Grass', 'Rabbit', 'Fox', 'Wolf'],\n",
    "   'col3': [1, 2, sc.nan, 4]\n",
    "})\n",
    "\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displays the top 5 rows. Accepts an optional int parameter - num. of rows to show\n",
    "MyDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.tail()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 3)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(MyDF) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['col1', 'col2', 'col3'], dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.columns \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "col1     object\n",
       "col2     object\n",
       "col3    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.dtypes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['Var1', 'Grass', 1.0],\n",
       "       ['Var2', 'Rabbit', 2.0],\n",
       "       ['Var3', 'Fox', nan],\n",
       "       ['Var4', 'Wolf', 4.0]], dtype=object)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.values \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.527525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           col3\n",
       "count  3.000000\n",
       "mean   2.333333\n",
       "std    1.527525\n",
       "min    1.000000\n",
       "25%    1.500000\n",
       "50%    2.000000\n",
       "75%    3.000000\n",
       "max    4.000000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'init_printing' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-19-5a24130b64ef>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'matplotlib'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'inline'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0minit_printing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'init_printing' is not defined"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p\n",
    "init_printing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p\n",
    "init_printing()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sympy.core.symbol.Symbol"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = var('x')\n",
    "type(x) # check it's class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = var(\"a, b, c\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = var('x', real=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.is_imaginary\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Symbol('x', positive=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\text{True}$"
      ],
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x > 0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\text{False}$"
      ],
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x < 0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEoAAAAYCAYAAABdlmuNAAAABHNCSVQICAgIfAhkiAAAAxhJREFUWIXt2FuIVlUUwPGfFupkokQPFdVDeCGympKiYIKQUkhEQSHs6TN9rJcIQZGYh6ALXR8q6mmiF40JDXvIeRG8gDfSyJTC0qCaSqEL0RBZ9rD25xzPnHPmu4zjh3x/OJzvrL3WXmvvb+291zl06dIkG3EIf+AMdmDhZY2oQ9mJtWJy7sQ2/ITrqozexy+Yeamjm0QW4TzWN6h/Lf7F8jKF+/Afnmk7tM5jG4bFJIzHjWJi+8oUhvAbeiYktM7ifjH4TQ3ofogjuKqocb7IpvcmLLRqaiLwhyfJH5zAd5haofMafsRtdUFe+UlMwdYC4yExqFU5+RQMpLYXm4m4TZYln41c92TstuBWPFrS7+tYg8X4tsz5YZxTvInfLTa34y5Ox1dTMO9WDquYmtYzqg9vJ/tj6M9cW5J8D55zcUI8ktpeKejzTXHS3V7leKaYpC8qdAaSk1p63pSet6pO5TJq2lt6K5P98zn5hiRfV2AzO7UdzMnfEjXUYtyQucZs/PNTB0MVgd2CEZzCU0n/U0yrGk0FNe1NVH+yX52T1zNqUYndiMicLGXLtj9v/KDR7KjihUwn+3DNOPp1TlcEU3QNNNDn9qQ7Lyf/Gv9geondD2L1NMzVmd8j6T5jHJszmd/r8FeDvt7AnJysFytEgXs613a0gT578SdOZmSzMBdf4u8Sux6j422am8S/s7dC5wlRPgwn3XdadZaoaX3pzTGa1VkeSvIPSuymijF804yz7AY8LLJlQYnuY2I5HMNd+Eq8DpTpX2p60/3znPzedC/LyAWipGkkYy+Qnajz2I3rRepm6cMgvsdSMaGbxdJ9qRmHE0h9ovIDrr/xl53eD6T7rmac5Y/0j9J9aS6gT/C7KNKGk3xQ1F0rRLpPNmUZVX/bvwM3F9gtEfXgx+04n4afcSA9zxXH6K9iueWpF2/7W/RX0/oedVQMOH/qPo6z4pB5Ntc2W2zi21vwN4aNxpb9VwpPG+eLQDPMEC+NOyaisw6iR7zoDrZiXPQJ4Rw+E8XaYVG4XQnME3XVy+IzUpcuXTqf/wEDmchdlP88cQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left(x + \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun = (pi + x)**2; MyFun\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\\\left(x + \\\\pi\\\\right)^{2}'"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latex(MyFun)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\left(x + \\pi\\right)^{2}\n"
     ]
    }
   ],
   "source": [
    "print(latex(MyFun))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751058209749445923078164062862\n",
       "08998628034825342117068"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi.evalf(n=100) # pi to a 100 places after decimal!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle 3.1415926535897932384626433832795028841971693993751$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(pi, 50)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYCAYAAAA74FWfAAAABHNCSVQICAgIfAhkiAAABQZJREFUaIHt2WmoVVUUwPGfZjkUGA1Ugs1qhYVNhmBlk4ERGfWlKHppBdFEUZRC9Ciao4wmKoqmDyWWiUElSeFAhZEWgVlZVpRWljY5NL0+rH29t+M59517330qdP9wOO/uvdba6+1h7bX3oU2bNv9rpmARfsEPmI2RW9WjNluV13GhmASHYiZWYZd6Sk/je+zY2961aTlHogsXlZTfCX/j9CKBo/EPrumxa73PnZiLr7EeP2ExbsKuDdo6Gw9gvginXXiuAf3zkk69wehJGyepruaN+Fas9gk5sjOxUgx2d+yV/BhbJDAHazGwpKNbkz/wDp7EHaKzF4l/8BsMbcDWkqT3K5ZqbLCGij77Vf0J0WwbdyXZr/EYbsPjeD/VZRmd5KeWsD1dLKLt8iqHi+jwWAlDraBDOD6uSf0BBeW3JrsPN2DrBAxDn+RP2cHqgzewHHerPyGaaePiJPcUdsip375Abym+RN86tu8VkWb/SkFWeFJy9oUc5TnJsbMy5X2Ss11ilW5JNhSUT0/vYQ3YehOfiv+jEa7EiSJR+73FbfQXk/srXCIiYpY/C3Sfx944paD+PpwjfP+8UpidECeLBOOdHAPXiehxi/+Gl3twgYgqNxQ0vqWpJEgf9nI7B4tFcD/m9YL9U7A7XhJ9fxqux1UY043uwhobWe5XnQwf11b0q/l7R4wSoSZvpn+AZ8Xgny+iwlSRfE7Hpd042JtcKxKowThKJEgf6t2I1U/0x1fK7dXNcHR6bxD7fPa+YJ5IVH/I0V2U3sdlyh8S4zcRa7BnKv8tPZsYLkLZnDoODhXZ/Be4PMm/Jn9vK0OHnuUQFVapZvhdeBV79MDeON3v7zeLaFq7UjuVP/KVaeORJPOXmOBjxcQ/VJwwuvBWHf31om9q6Sp4OrPKY1JFXv5Qy+01RhZiUDfyFVbUcSbveaqk3Vr2wJlYJpKlI5qwQfeDdYwYpGyG36m1E+LRJLMB+2bqBolTR5fi7eOb5GdpareM9eldlLlXqA1Pk7GuZFvTsHOmbBTOEBdhKzJ1S0rareU7cQZ/H5/gGa2/lu2X7H6CG1tsO8va9F5s8/5ZJ6LEZHHMfDtHf6DquDbMEDHbFtSROVckNyuT7CPNNpbo0JotI4/FyfZuTeiOU7x6d1Y+yk1rso0Kk1S3wDwqx9y8ZL6vGKvldexvRm2EWClW/4gC2QkijH8kbs3mi9A4TYTobY0h6f13i+1uxBMFdUfgcLGolslftY0wVwz4IaoDXEsl+n2RoztCXAk0E2k3MSM5cGCmfKwIUZ+Lq04iu+3Cyz1or0PzEWK4OFVk6at6MbUwU3cADlJ8mVNhnMavrml9DgGzktzVmfLxYoKskd8PFya9y0v4sol+md8viounU/FZKhuFV/CzONOuTOUz8J7IAY4VEWNLMkEkuAvECvlRJJXHi5u3VeKWr5a52Af72XxPnpgeqkexMarJ7WpxvO0JzbRxmYg694p7iMXC/4ki+l0kxibL+FQ/qycO7yASs3fT7wNFx67BYTnyJ4tZmHeRVYYOzUeIkXhQhMTVIpv+WZy/O+V/zl2R2ts3p65T/XxgRQmfKjaKIkSzbewuvtN8KW4rV4vkeXSB/GCRTPYkem9iSnLu8FYYa7NVuEI3XzAbYYCYibNbYazNFmeguIOZ0Yxy3ifPv8Q5vr/IEYo+nrTZNhkmTkJ3qd5jtGnTpk2bNq3mXwrBfZQL0BGQAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle \\left(x + 3.1416\\right)^{2}$"
      ],
      "text/plain": [
       "            2\n",
       "(x + 3.1416) "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(MyFun, 5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF4AAAAYCAYAAABz00ofAAAABHNCSVQICAgIfAhkiAAAA4FJREFUaIHt2FuIVVUcx/GP2kUbRYkerKCmy5RR0VQECZVHy3qQSCgYAonp8lJQDxWB0EMPXSCilIouLxUFFRhjCEWECKZ0JUajC12GE1Ra9pBlZWRND/+9me0+e5/Z55w5Tk3nC5t9+K//f62111nrt/5r0aPHDGMt3sfP2INNOGtae/Q/4Q1cLwb7bIxgN45uFvQcfkBft3v3H+Z8jOOmiv7z8ReuLHO4AH/j9pz9GjyKt8TyGccLLXY2pZ7EFz2726xzOhjBLjGok3Gs+L6L4LACh/vEwD6Rs9+Nc7AP32BJm51N2Yt1BfZ9HdZ7KHkA7+I23D+J73qM4u2iwtPEbH+6oGw5BjALNZ3P+Hqbsc0YFv2qdaHuMj7F15jdxOdhfIeTU0Pe+QYxsC8XBG/BF+LDZiKrlMtf/jk3E/cSTsDKknofwbVYgbHUmJeay8QG8E6HH1GFI7FGdPpX7MTWpP3pYK+Q15vxMTZkypZgCNvwJnZkyrYn75Uik8myPolbjs/KGu7DAXxUoZM13dlcx7CszTrpXGpWJ/H35ux3JfYbC2IWJmXv5eyPi71yBRZnnvkcLDXHY47YpbvNM7g06UifyHOfQj9eF5v4dDCYvEdz9vNK7MRK2S9WbpZbsACbxZimz535CpaKf65I3/PUdDbjy3goqXekgm9ddU0ex7MV6tyY+A7k7J/jTyGPRXwr1KIyWY3/PXnPbaWCKeZJ3IFLKviuw6KcbRBXiQNgPVdWNFvzDIp09suMbQFOFbr/R0ncPBPj1zLHiX97WwXfmu7M+FQv97cZP6x9jV+UxG7P2S9O7M+XxM0WKfhXrTSW1fhd4jLn9FYqmGIuTN5jTb26Q6rvO3L2ZvpOjNesJuWFZAd+XKRzx4ilNRWcIlKxwzO2MxTfAfXjseT3VK+kKpRtrOmNYlm2l06WLa00ls/jX8HVuMLBOkekWquT34uT91ITm9aPGnfszTgRJ5nQ3CGh41vFie8X8QetEvvLa2KTPdSUzfj0NvFMfCKuS7JcLs4er3bS+BH4Xtw/5LlH86yhXhBTT8r6M7ZleFEcKH4S2cIecTC5TizbdhnWvsaPigE8KmcfEpPqN40Ta6HYVDe20V4DazUei3sUc6vMjWOnzBUSsGkqKpvBzBMXXxsmcyxiToHtAD4Uh4UPhBT0aGRA5PUPCsns0aNHj38b/wCiBOffjPaRBQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left(1.5 + \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "         2\n",
       "(1.5 + π) "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun.subs(x, 1.5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFcAAAAYCAYAAACPxmHVAAAABHNCSVQICAgIfAhkiAAAA81JREFUaIHtmH9ollUUxz+ZqdOJS0ud5B+KbgM1pmIkJOQ0h4gUKAj9oe+wP4x0SESiIA0JKpF+IBIEilOEJZNNhn9okVIqlU43pNRRMKOatUqtcIvU+cf3POzx7rnv+z7vnqnl+4WHC+fXPfc855577oU88rhPsRE4BfwJdAJNwPR76tH/CIeBKhTQGUADcBkYnU6pFvgVGDHQ3t3nmA30AC9lKV8I3ASW+gTmALeAV/vt2sBiDFp0A/Ad0AVcA44Dq4FBCc3TAHSgwGVCMfoZz/gEjgBXgYJEXBs4rEEL+RnYB7wF7EK+9wD1wEMJzPOU2duUhex+4CzwcBSzBGXtRwk4lQ1SyPFnc9CtQNvPzdDxwA9md1k/fAvjPHApYq4w3kU/erJP4G1zaoGH/yLKkjbgL+AKOi2r4vsL9C+46bDJ7G536EuMns03M6T3htEqPfO9h0pHWZg42BFaiArylxEGRgJ7UDC/QAfeWOB5tB3HAu94Jr/b+NfGGw79GvAh8DLwDSodAcqAFahmfwK0hngnbHwOdQhhfGB684ELPodGmDPnPPxCtOVcFKMs9hpOgxTJZ+5gtAZfpr1gvDcd+utGXx2hM8p4Xzv0HajHrUCxCb4+h1+JGTiS5SLCuIgyOS5SJB/cbWbzkIdfY/zlDr3O6LM9el2ohw3DV1JqXOW5xvjYY/xRYDMqGVdQ+QgbPOPRC9Cexpmob3cGe1GoNt3z+Bv5RpOZ6tDbUDkZ6tH7ib5lJi3CNbfLxmERck+ijB6HtkYd8LtNNglYyZ01KgrvA0UOrRzV7FoU/DBaMthzsRbVv2/RgfyHR64c+Bv1xgFGAlNQHf7Ho1dAb4xiYwL6o8cjeK1AN9Hbd4vpvZLDnCmSKQvrzc45dLD6UGRyJxz6PKPv9egNQi3q93GcCvdtHejxodSRmYgy95h9rrNBG9YcZ+IEsQG1Qi3oxE5X+8ttdHfZLBt9u6UUXUhi7aZwcHuAz4HH0BYJ0G3jZOCREH0Mqs9PoPIQdxsngc2oN29GpeC3DPJBcF1fg5csX6f0tI1H4zjn9rkH0K2mkt6a1Al8htqNr4BPUfu12Ca7hepcN3cXq1BJuon67uoImXbuPBh9mRscftPQWn50+ItsnoM5ewsMAX5BQQzjcXSB6EQ97Ul0iM1EGb8zx/lS5F5za8jccRxzdFpQkIY79BUo668Drzm8Uegga8zBxz7YSN/r34OMdWR46YqDYeiRoikJY/9xFKDHmPpMglGIehq7gS4EQ4HT9N7TH0RMRX3vVvSUmUceeeTRH9wGOdMFwEn1n3AAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\left(a + 2 \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "         2\n",
       "(a + 2⋅π) "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun.subs(x, a+pi)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFcAAAAYCAYAAACPxmHVAAAABHNCSVQICAgIfAhkiAAAA81JREFUaIHtmH9ollUUxz+ZqdOJS0ud5B+KbgM1pmIkJOQ0h4gUKAj9oe+wP4x0SESiIA0JKpF+IBIEilOEJZNNhn9okVIqlU43pNRRMKOatUqtcIvU+cf3POzx7rnv+z7vnqnl+4WHC+fXPfc855577oU88rhPsRE4BfwJdAJNwPR76tH/CIeBKhTQGUADcBkYnU6pFvgVGDHQ3t3nmA30AC9lKV8I3ASW+gTmALeAV/vt2sBiDFp0A/Ad0AVcA44Dq4FBCc3TAHSgwGVCMfoZz/gEjgBXgYJEXBs4rEEL+RnYB7wF7EK+9wD1wEMJzPOU2duUhex+4CzwcBSzBGXtRwk4lQ1SyPFnc9CtQNvPzdDxwA9md1k/fAvjPHApYq4w3kU/erJP4G1zaoGH/yLKkjbgL+AKOi2r4vsL9C+46bDJ7G536EuMns03M6T3htEqPfO9h0pHWZg42BFaiArylxEGRgJ7UDC/QAfeWOB5tB3HAu94Jr/b+NfGGw79GvAh8DLwDSodAcqAFahmfwK0hngnbHwOdQhhfGB684ELPodGmDPnPPxCtOVcFKMs9hpOgxTJZ+5gtAZfpr1gvDcd+utGXx2hM8p4Xzv0HajHrUCxCb4+h1+JGTiS5SLCuIgyOS5SJB/cbWbzkIdfY/zlDr3O6LM9el2ohw3DV1JqXOW5xvjYY/xRYDMqGVdQ+QgbPOPRC9Cexpmob3cGe1GoNt3z+Bv5RpOZ6tDbUDkZ6tH7ib5lJi3CNbfLxmERck+ijB6HtkYd8LtNNglYyZ01KgrvA0UOrRzV7FoU/DBaMthzsRbVv2/RgfyHR64c+Bv1xgFGAlNQHf7Ho1dAb4xiYwL6o8cjeK1AN9Hbd4vpvZLDnCmSKQvrzc45dLD6UGRyJxz6PKPv9egNQi3q93GcCvdtHejxodSRmYgy95h9rrNBG9YcZ+IEsQG1Qi3oxE5X+8ttdHfZLBt9u6UUXUhi7aZwcHuAz4HH0BYJ0G3jZOCREH0Mqs9PoPIQdxsngc2oN29GpeC3DPJBcF1fg5csX6f0tI1H4zjn9rkH0K2mkt6a1Al8htqNr4BPUfu12Ca7hepcN3cXq1BJuon67uoImXbuPBh9mRscftPQWn50+ItsnoM5ewsMAX5BQQzjcXSB6EQ97Ul0iM1EGb8zx/lS5F5za8jccRxzdFpQkIY79BUo668Drzm8Uegga8zBxz7YSN/r34OMdWR46YqDYeiRoikJY/9xFKDHmPpMglGIehq7gS4EQ4HT9N7TH0RMRX3vVvSUmUceeeTRH9wGOdMFwEn1n3AAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\left(a + 2 \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "         2\n",
       "(a + 2⋅π) "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_new = MyFun.subs(x, a+pi); MyFun_new\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_vec = sc.arange(0, 10, 0.1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,\n",
       "       1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,\n",
       "       2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,\n",
       "       3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,\n",
       "       5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,\n",
       "       6.5, 6.6, 6.7, 6.8, 6.9, 7. , 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7,\n",
       "       7.8, 7.9, 8. , 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9. ,\n",
       "       9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_vec\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = sc.array([N(MyFun.subs(x, xx)) for xx in x_vec]) #Note: using a list comprehension!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_new_vec = sc.array([N((MyFun_new).subs(a, xx)) for xx in x_vec])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11a2df490>]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = p.subplots()\n",
    "ax.plot(x_vec, MyFun_vec)\n",
    "ax.plot(x_vec, MyFun_new_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_lamb = lambdify([x], MyFun, 'numpy')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = MyFun_lamb(x_vec)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = sc.array([N(((x + pi)**2).subs(x, xx)) for xx in x_vec])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = MyFun_lamb(x_vec)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  9.8696044 ,  10.50792293,  11.16624146,  11.84455999,\n",
       "        12.54287852,  13.26119705,  13.99951559,  14.75783412,\n",
       "        15.53615265,  16.33447118,  17.15278971,  17.99110824,\n",
       "        18.84942677,  19.7277453 ,  20.62606383,  21.54438236,\n",
       "        22.48270089,  23.44101942,  24.41933795,  25.41765648,\n",
       "        26.43597502,  27.47429355,  28.53261208,  29.61093061,\n",
       "        30.70924914,  31.82756767,  32.9658862 ,  34.12420473,\n",
       "        35.30252326,  36.50084179,  37.71916032,  38.95747885,\n",
       "        40.21579738,  41.49411591,  42.79243445,  44.11075298,\n",
       "        45.44907151,  46.80739004,  48.18570857,  49.5840271 ,\n",
       "        51.00234563,  52.44066416,  53.89898269,  55.37730122,\n",
       "        56.87561975,  58.39393828,  59.93225681,  61.49057534,\n",
       "        63.06889388,  64.66721241,  66.28553094,  67.92384947,\n",
       "        69.582168  ,  71.26048653,  72.95880506,  74.67712359,\n",
       "        76.41544212,  78.17376065,  79.95207918,  81.75039771,\n",
       "        83.56871624,  85.40703477,  87.26535331,  89.14367184,\n",
       "        91.04199037,  92.9603089 ,  94.89862743,  96.85694596,\n",
       "        98.83526449, 100.83358302, 102.85190155, 104.89022008,\n",
       "       106.94853861, 109.02685714, 111.12517567, 113.2434942 ,\n",
       "       115.38181274, 117.54013127, 119.7184498 , 121.91676833,\n",
       "       124.13508686, 126.37340539, 128.63172392, 130.91004245,\n",
       "       133.20836098, 135.52667951, 137.86499804, 140.22331657,\n",
       "       142.6016351 , 144.99995363, 147.41827217, 149.8565907 ,\n",
       "       152.31490923, 154.79322776, 157.29154629, 159.80986482,\n",
       "       162.34818335, 164.90650188, 167.48482041, 170.08313894])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = sc.array([N(((x + pi)**2).subs(x, xx)) for xx in x_vec])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26.8 ms ± 4.07 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit #remember this?\n",
    "\n",
    "MyFun_vec = sc.array([N(((x + pi)**2).subs(x, xx)) for xx in x_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.2 µs ± 150 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "\n",
    "MyFun_vec = MyFun_lamb(x_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEoAAAAYCAYAAABdlmuNAAAABHNCSVQICAgIfAhkiAAAAxhJREFUWIXt2FuIVlUUwPGfFupkokQPFdVDeCGympKiYIKQUkhEQSHs6TN9rJcIQZGYh6ALXR8q6mmiF40JDXvIeRG8gDfSyJTC0qCaSqEL0RBZ9rD25xzPnHPmu4zjh3x/OJzvrL3WXmvvb+291zl06dIkG3EIf+AMdmDhZY2oQ9mJtWJy7sQ2/ITrqozexy+Yeamjm0QW4TzWN6h/Lf7F8jKF+/Afnmk7tM5jG4bFJIzHjWJi+8oUhvAbeiYktM7ifjH4TQ3ofogjuKqocb7IpvcmLLRqaiLwhyfJH5zAd5haofMafsRtdUFe+UlMwdYC4yExqFU5+RQMpLYXm4m4TZYln41c92TstuBWPFrS7+tYg8X4tsz5YZxTvInfLTa34y5Ox1dTMO9WDquYmtYzqg9vJ/tj6M9cW5J8D55zcUI8ktpeKejzTXHS3V7leKaYpC8qdAaSk1p63pSet6pO5TJq2lt6K5P98zn5hiRfV2AzO7UdzMnfEjXUYtyQucZs/PNTB0MVgd2CEZzCU0n/U0yrGk0FNe1NVH+yX52T1zNqUYndiMicLGXLtj9v/KDR7KjihUwn+3DNOPp1TlcEU3QNNNDn9qQ7Lyf/Gv9geondD2L1NMzVmd8j6T5jHJszmd/r8FeDvt7AnJysFytEgXs613a0gT578SdOZmSzMBdf4u8Sux6j422am8S/s7dC5wlRPgwn3XdadZaoaX3pzTGa1VkeSvIPSuymijF804yz7AY8LLJlQYnuY2I5HMNd+Eq8DpTpX2p60/3znPzedC/LyAWipGkkYy+Qnajz2I3rRepm6cMgvsdSMaGbxdJ9qRmHE0h9ovIDrr/xl53eD6T7rmac5Y/0j9J9aS6gT/C7KNKGk3xQ1F0rRLpPNmUZVX/bvwM3F9gtEfXgx+04n4afcSA9zxXH6K9iueWpF2/7W/RX0/oedVQMOH/qPo6z4pB5Ntc2W2zi21vwN4aNxpb9VwpPG+eLQDPMEC+NOyaisw6iR7zoDrZiXPQJ4Rw+E8XaYVG4XQnME3XVy+IzUpcuXTqf/wEDmchdlP88cQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left(x + \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIMAAAAWCAYAAADjNi+WAAAABHNCSVQICAgIfAhkiAAAA0hJREFUaIHtmV+IDVEcxz/LRmm3NkpevGiF/Lt43S0WKRJFKS+O1oOHTR78idBNaiksCXnRlRRSFApPaimFrHatSNm0IVcWaSWxHn5n7NzZmbkzZ87sXppPTffub8753vP9nTPnnDkLGRmW2AU8BL4CReA6MGtEW5QRRqr9dRvYqAVnA1eB98B4Wz+QYZVh7a8a4BewMg3xDOuU9Ncoy+K1WrPPsm45JgCbkJH+CvgOfAHuAc3Y9/m/kGp/XQaeAKPTEA9hMzAAvAUuAK3AWeCzjl8Bqoa5Tf8CqfXXUaQzphjWV0jHLTSo24RMdd4ZYBLwRuuuMWxXmijMPSelbH/dwT9xVUBB3zvoU68NeAdMT9A4RTqJ2a11T7hiK3QsyjXPVc80P0EozD2beoCI/TUX2VB0Uzp1HNGiZ3zqHEd2pDNiWRmKIp3BsF3rtrliDcApHe8C8q7roo63A/sonW1M8hOGwtyzqYdY/VXQQkr/7TxZlxg6DZ9E3lmbkCnZuWqiOnKhsD8YqoFOrbvMc2+1jh/wxHfoeHOAZoHo+SmHIpnnuB5i99dkZDf+GmjRoreAMT5lg6alfHQ/f1HYHwyHteZNn3t5fW+tJ+48VQsCNOPkpxyKZJ7zxPNg1F+troL3gXGGjQ2iJ6RhflfB4De26LrP8T9UuabvT/XEXwI/gbEh2ib56cG+5yQehlAdEC+6vjcD/XFEI3AMqPPEcsAq4BySODcdMfVbkLWxG1gMfPIpkwO+IecSDrVAPfAM+BGib5KfNDwn8RCJ9cBvZLc5AJxOKhgRhZ1lYqvW6QQmBpSpY/CpdtOo4+dD9G3mR2HuOYkHX7wbnuXI9NQFzAFeICd70+IKjxA7kbeGDmAR8CGgXE5/PvXE5+vPoKeykvJj6iEQ92BoQE7qepGddxHYgywlh+IKjwB7kXf8x8jS8DGkrJNIb8Kc/+B1+tSptPyYeAjF2TPkgBvIef5SZAoEMf8IWdcakffWSmQDsB85A2hHNo9eehjclAU9Vc5Gcyay3+h1la+0/MT1EIl65BCiD5n6vCxB1qAHcUQNUJivn3nK787vusp3IAPH+xawDplR+oFtOpZmfhTmnuN4yMjIyMjIyMiwxh/D21AC9+psGAAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle x^{2} + 2 \\pi x + \\pi^{2}$"
      ],
      "text/plain": [
       " 2            2\n",
       "x  + 2⋅π⋅x + π "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(MyFun)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x**2 + 2*pi*x + pi**2\n"
     ]
    }
   ],
   "source": [
    "print(expand(MyFun))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEoAAAAYCAYAAABdlmuNAAAABHNCSVQICAgIfAhkiAAAAxhJREFUWIXt2FuIVlUUwPGfFupkokQPFdVDeCGympKiYIKQUkhEQSHs6TN9rJcIQZGYh6ALXR8q6mmiF40JDXvIeRG8gDfSyJTC0qCaSqEL0RBZ9rD25xzPnHPmu4zjh3x/OJzvrL3WXmvvb+291zl06dIkG3EIf+AMdmDhZY2oQ9mJtWJy7sQ2/ITrqozexy+Yeamjm0QW4TzWN6h/Lf7F8jKF+/Afnmk7tM5jG4bFJIzHjWJi+8oUhvAbeiYktM7ifjH4TQ3ofogjuKqocb7IpvcmLLRqaiLwhyfJH5zAd5haofMafsRtdUFe+UlMwdYC4yExqFU5+RQMpLYXm4m4TZYln41c92TstuBWPFrS7+tYg8X4tsz5YZxTvInfLTa34y5Ox1dTMO9WDquYmtYzqg9vJ/tj6M9cW5J8D55zcUI8ktpeKejzTXHS3V7leKaYpC8qdAaSk1p63pSet6pO5TJq2lt6K5P98zn5hiRfV2AzO7UdzMnfEjXUYtyQucZs/PNTB0MVgd2CEZzCU0n/U0yrGk0FNe1NVH+yX52T1zNqUYndiMicLGXLtj9v/KDR7KjihUwn+3DNOPp1TlcEU3QNNNDn9qQ7Lyf/Gv9geondD2L1NMzVmd8j6T5jHJszmd/r8FeDvt7AnJysFytEgXs613a0gT578SdOZmSzMBdf4u8Sux6j422am8S/s7dC5wlRPgwn3XdadZaoaX3pzTGa1VkeSvIPSuymijF804yz7AY8LLJlQYnuY2I5HMNd+Eq8DpTpX2p60/3znPzedC/LyAWipGkkYy+Qnajz2I3rRepm6cMgvsdSMaGbxdJ9qRmHE0h9ovIDrr/xl53eD6T7rmac5Y/0j9J9aS6gT/C7KNKGk3xQ1F0rRLpPNmUZVX/bvwM3F9gtEfXgx+04n4afcSA9zxXH6K9iueWpF2/7W/RX0/oedVQMOH/qPo6z4pB5Ntc2W2zi21vwN4aNxpb9VwpPG+eLQDPMEC+NOyaisw6iR7zoDrZiXPQJ4Rw+E8XaYVG4XQnME3XVy+IzUpcuXTqf/wEDmchdlP88cQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left(x + \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factor(x**2 + 2*pi*x + pi**2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF4AAAAgCAYAAACb+s/fAAAABHNCSVQICAgIfAhkiAAAAsdJREFUaIHt2T+IFUccwPHPGQNeOJFoE4RoYYqICtqIhRe0EIIiCBFitDCWQUIEbZQgVmJQIgrBdLnaFAHFQssgCJqgaAoFDSSoiblE8Q+aRs5i5uX2zdu92zsvux7OF4a383v757u/nZ2ZN49MpgYf4BTuYASftmrzEsxoW2CCDOAXfIFnLbu8tjyRW3xmouTEt0ROfEvkxLdETnxLzGxbYIIM4L24PQMLsBz38XtbUq8Da4QfTmkZak8pk8lkXln64udIqxaZTFu8jXtY1LZICd9jd0l8Ojr3cBjf/b8updRZZ18mzNfnJPG2nPfiEh5hGKexNNmnyrmLt/AAq6dIbAgHau67HgexGU9VL/f+hJ2F+lQ7U9/7LHYIyV6GH/An5ib7pc49bBaeTl8S/xJXhfXv4SjWX0NsSP3EFxlrnX0/zhfqVc407z2A59iYxFNndK/VDOJnvTOcmfgMS/AJ1mHXJMSmgotYaTSBVc407z1byOeDJJ46/yfXYSHulpzwQGH7N5zB+y9rOUnu4k3Mxy3VzjTvfQxXcCGJp87obvH9+Dc56F0cxzXhlX4i9Gu3Sy68L37fKdtKYoOTuKEinf9Z+wufqXMb3l8L48xHQnczljO6W/zfwtSswzxh1P4Re6L08xi7UnLxb3GyUP9KmKUcL8TujHMD49EZuIYrnGne+yi2YC1+reGM7sRf1j2obcAsfGy0D90uDCJlN3A/lg6PY/3mGNITZamQhHuxnjrTrPexeJ21uF7TGd1dzVksFloM/BNlNwlr4J/jUBSbymSK11keS3GdfUGy32D0rHJu0vsbofvaKgyo78QyMI5zKReMzjn74skf4S/h1TuiZGpUwZD607I1xl9nn4WHWDWGc5PeZb4jybFVzj18iBt4o6Zkk+zEuZL4dHTukb0pvOp/CE/qVWIFTghdSZHp6JzJZDJN8AJ3E91CdHA8GAAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\frac{1}{\\left(a + 1\\right) \\left(a + 2\\right)}$"
      ],
      "text/plain": [
       "       1       \n",
       "───────────────\n",
       "(a + 1)⋅(a + 2)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1 = 1/((a+1)*(a+2)); f1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHQAAAAfCAYAAAA2qem+AAAABHNCSVQICAgIfAhkiAAAAntJREFUaIHt2j1oFEEYxvFfQgqFCBIbGy3EIqBFakE5BRER0UbEQrzWSlvFIo2dqBG0XsFKsFHsLFIIFjaiFhYKUfADgwkkAcUPtJg9PE437t7N7Z6X/cPA3rCz7/PsuzOzO3PU1ERkD+7iLX6iWama8uib79FYF+qScTzHGXyuWEuZrAnfK9ZOD20nqu+qe2hNZOqEDhl1QoeMOqGBpvC22ahWRu/UCR0yxiqOP47t6fEotmIKC3hTlagSGFrfDWGo6yxJyTqayh1yG/rku+oeOouRijVUwaySfM/5+5OTVW6VISoyc4p5TKoQ2S2dPfQVvhRo/y6ilrK4io0ddVM4gptCwtt5UoKmgaPIE19WKUJTd3No1R7/KLHm0LU4DzKAvuvv0CHjf0zoOTzGEuZxDzsrVVQOufZQBymhCaZznNfADezCPnzHA0z0SVc/SeTzTEV7qBfwVNjjmxcEr8/ZNpHfXDvj+IHDXbSNRbe+E915ztxDjd1Dx3AaO3AC+3E2coxONgg+FvscZzWq8J0pJCbTbcevcR+TkWN0MiN8Kz7qc5zVmG47Lst339mCa3gmLDKv4BsuZpx/Pj1npe3crx11u/8R87KwuLGtR+29UMR3DM+U8HedTfiA2zggDD2TWMaxjDYTwo5Dq9wRbkx73Wrz0BW8V21PKOq7V88tMhMaa8g9hHU47vcqzSnhhSVr6WwhLS2W098vc8SbSWPtxYsu9MaiqO9ePOciVkI/CSaOCkPPQWF4WRZRbMp1nExjLWJzWt8assqkTN+l7qGOCDd6CR+FYeQSHha4RiLfK3zWOmaetrHp1Xciv+6GIdgNqqmpqampGVR+AQNhF6+R4HC9AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle - \\frac{1}{a + 2} + \\frac{1}{a + 1}$"
      ],
      "text/plain": [
       "    1       1  \n",
       "- ───── + ─────\n",
       "  a + 2   a + 1"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "apart(f1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGMAAAAfCAYAAADz23MvAAAABHNCSVQICAgIfAhkiAAAAqtJREFUaIHt2DtoFFEUxvFfYvABESQ2NlqIRcAHQa0EJQoiEkQtxAeI6UQstBPFIo1oIWoE7YS1FQRR7IKkEFPYiFpYWPhWfCSQBMQXWtxZXNfdMLszmd1s5g8XJjfn7jnfnDnnzh1yWoZNuI23+I3+hkaTDdOmuT3h+k48xTF8TR7OjGBGaJ40OyqjlFQ1J62MnBTJk9FE5MloIlolGf3Cm01vY8NIRqskoyXoSLi+Eyui63YsQw9G8SrhbzcrTau5V2gP5aOQcRz9smtTvaZJc9LKGEZb0iBmGMNmn+aqvFD5yaw2Co0Ish6SVkYjuIRFZXM92InrQrJKeZRBTKlSy5OWxaiVfrXvGY3W+N8oVsZs7IFNpzk/ZzQRWSfjKB5jPBoj6Ms4hkZwEg8FzZ9wB6vKjdJKRgEDMeze4ATWYj3u4RbWpBRH1hTE092Lq9iALfiJIXRNtei08OROChksYEGKQVViFIfrXJsG9Wqmft2d+IUdpZPlldGBI1iJ/diK43U4i8Mc7IsCezBNPuKQpeYiC4V7P1YeSCkDJdcvcRfdKQeyWtgr5gtP4248SdlHLQyUXE+X5nIGhfPPSDWDpbgs3JhR4Ub9wJkKtqei/0+W2H0vm9tYxc9c4UPbOpzFZxU2s4yoRTPJdBe5gHdYXs1gMT7gBrYJJduNCeypYN8l3NDiuBmJKp2L23eHcC2mbZrUqpnkui/ivSqVV2xTfULb2OvvCfiQ0M8rfU4YjUaRiejv51MEUo12zKtjXVJq1Uwy3YORr814VsmgmIwvURC7hJLdLpTkRExHcTkn9OTXwiZ2QHjta8RZIyvNcAUHI19jWBLNF1vbP7RFC8bxUSi987gf01lBvFe8grBJfov8DAktohEk1Ux83dW+R8VZm5OTk5OT8x9/ACRRDdgvJ7DBAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle \\frac{1}{a + 3} + \\frac{1}{a + 2}$"
      ],
      "text/plain": [
       "  1       1  \n",
       "───── + ─────\n",
       "a + 3   a + 2"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f2 = 1/(a+2) + 1/(a+3); f2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF4AAAAgCAYAAACb+s/fAAAABHNCSVQICAgIfAhkiAAAA8RJREFUaIHt2ktoHVUcx/FPH2p8IbagVRClplJtI4igogZUFC1FrOAbanUlUgTRlVJLNtKCRYkQRUG8LgqlIi7ERSSgC7HggxbdVKiIgn1pozYBsa3UxX+mmcydSebGm7levV8YyPzvyZzfzPznf875zdDjP89z+AJH8TM+wOoO6BjCydx2sG4RC2vs6xa8hhtxG05gDEvadPyGuKhV+BYXZbaBNmmozOIa+7ozt78ev+Mmkf2wCQ9gOf7Ah3gy+budnNCBLM9SZ8bnOTfp/9dMbLG40KvwMO7A0/PQ93Lsx/fYkez/b9iJ3Vg0Q5s38U7F4zVUKzVrxFN1NW7HJyL7l1bsp6t5WWRcNtMuwav4BuOYxHG8WHKM55M2k5m2x3KxwQpazsFhPNPqSXQbr+AAVmZiS0XW7RRjwark9wncX3KcJejPbO+JG5eNnVlR08d4vZWT6DaGxQW+Mhd/FL9hQSa2QUz1VlQ8dkP1WU2WPpEIm+fwv3OmzlnNiJjJrBMD6rIkPokj4pFfJ0rNGlFKJrCvzTq2iVnUj7gAL+Bs1ceSriO/aEm3IZHpI2JxdViUjG34tIXjN1TL+B1ifDmGn0SJuqqFfnr06NGjW0hnESc7qqJHj05xPg7h8k4LKeBdPFsQ70bNTbyEt+dXSyFVvPoBYSWcl4t3SvNGfC00H8UurM21KdM8jbPEwubmNglrqL6SHMXj4mIP4H2xws179V+KE05pt2aq675HLPT6cYXwlI4L8y1LXnMT94m7syAX3yTu7KTIxoZqHkjD3JbwxCr2L9ydi282fVFVppnO6B7HE7lYXjOm+/GD+ErzDKcujzxLkVcPn+M6UxewTDP16l6Eh0TCfJb7La/5lLiUS8VSOs9Q5u8fxFuhlQXt2skw9oi6mWU/TsPF+E65ZurRPSA09okn617hNWXJa25iFG/kYq145O3yx4u8+pQVIrvTgbdIc526Txc1/lpswS+aJwV5zU1sF354SqseeTv88SKvPsv1yUlcWKK5U7pTxvDWLJoxvdTsxmOZ/bXiEXrQVA3dIOrYnoJOx5MtZSLZr2rrDid93Yq9JW1WC0fxUInmTujOshBnzKL5VMOUUfGCIn33mPXI+/EUtpofj3xETCcfMeXVL0v6zzKY6CzTXKfurYmey0St3yI+Ydk+i+ZCdpmac/5Tj7yh+rRsJq8+pU98DnLDDJrr1N0Qg/afST9jmj9hKdPcxF3iY5+Z3vx3io34qCDejZqbxO4T5eeAuFP/Jq4RL6SP5OLdqLlHjx496uBv5jgySJROD8UAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\frac{2 a + 5}{\\left(a + 2\\right) \\left(a + 3\\right)}$"
      ],
      "text/plain": [
       "    2⋅a + 5    \n",
       "───────────────\n",
       "(a + 2)⋅(a + 3)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "together(f2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF4AAAAgCAYAAACb+s/fAAAABHNCSVQICAgIfAhkiAAAA8RJREFUaIHt2ktoHVUcx/FPH2p8IbagVRClplJtI4igogZUFC1FrOAbanUlUgTRlVJLNtKCRYkQRUG8LgqlIi7ERSSgC7HggxbdVKiIgn1pozYBsa3UxX+mmcydSebGm7levV8YyPzvyZzfzPznf875zdDjP89z+AJH8TM+wOoO6BjCydx2sG4RC2vs6xa8hhtxG05gDEvadPyGuKhV+BYXZbaBNmmozOIa+7ozt78ev+Mmkf2wCQ9gOf7Ah3gy+budnNCBLM9SZ8bnOTfp/9dMbLG40KvwMO7A0/PQ93Lsx/fYkez/b9iJ3Vg0Q5s38U7F4zVUKzVrxFN1NW7HJyL7l1bsp6t5WWRcNtMuwav4BuOYxHG8WHKM55M2k5m2x3KxwQpazsFhPNPqSXQbr+AAVmZiS0XW7RRjwark9wncX3KcJejPbO+JG5eNnVlR08d4vZWT6DaGxQW+Mhd/FL9hQSa2QUz1VlQ8dkP1WU2WPpEIm+fwv3OmzlnNiJjJrBMD6rIkPokj4pFfJ0rNGlFKJrCvzTq2iVnUj7gAL+Bs1ceSriO/aEm3IZHpI2JxdViUjG34tIXjN1TL+B1ifDmGn0SJuqqFfnr06NGjW0hnESc7qqJHj05xPg7h8k4LKeBdPFsQ70bNTbyEt+dXSyFVvPoBYSWcl4t3SvNGfC00H8UurM21KdM8jbPEwubmNglrqL6SHMXj4mIP4H2xws179V+KE05pt2aq675HLPT6cYXwlI4L8y1LXnMT94m7syAX3yTu7KTIxoZqHkjD3JbwxCr2L9ydi282fVFVppnO6B7HE7lYXjOm+/GD+ErzDKcujzxLkVcPn+M6UxewTDP16l6Eh0TCfJb7La/5lLiUS8VSOs9Q5u8fxFuhlQXt2skw9oi6mWU/TsPF+E65ZurRPSA09okn617hNWXJa25iFG/kYq145O3yx4u8+pQVIrvTgbdIc526Txc1/lpswS+aJwV5zU1sF354SqseeTv88SKvPsv1yUlcWKK5U7pTxvDWLJoxvdTsxmOZ/bXiEXrQVA3dIOrYnoJOx5MtZSLZr2rrDid93Yq9JW1WC0fxUInmTujOshBnzKL5VMOUUfGCIn33mPXI+/EUtpofj3xETCcfMeXVL0v6zzKY6CzTXKfurYmey0St3yI+Ydk+i+ZCdpmac/5Tj7yh+rRsJq8+pU98DnLDDJrr1N0Qg/afST9jmj9hKdPcxF3iY5+Z3vx3io34qCDejZqbxO4T5eeAuFP/Jq4RL6SP5OLdqLlHjx496uBv5jgySJROD8UAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\frac{2 a + 5}{\\left(a + 2\\right) \\left(a + 3\\right)}$"
      ],
      "text/plain": [
       "    2⋅a + 5    \n",
       "───────────────\n",
       "(a + 2)⋅(a + 3)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simplify(f2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAA0AAAAPCAYAAAA/I0V3AAAABHNCSVQICAgIfAhkiAAAANhJREFUKJHN0T1Kw0EQBfAfqGChoIiohYUXENKlzDW0EKw9g42ld7BJCAheQIVgZcgHCuk0pXZGSZHCgAla7AaXv9sIFg5M896+efN2+KPaRx19jDBEF4ezB3MFwTLaeMcdbvCEMvYwxm3RZQmbGfet6Prw27Uf8ZIjVnGMlpBlis+k72E+EeziGhvo4BxvmGAHB+gVXXpC0Epmg5PodJSC2xG8zAhW8Bz5ckqsR7CPhQRfw1XkPrBYnNjwHfYUNbziQviQH3lmblUMhJs0hfClOOwsJ/qH9QWX7TVQlPmlSQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle a$"
      ],
      "text/plain": [
       "a"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEoAAAAYCAYAAABdlmuNAAAABHNCSVQICAgIfAhkiAAAAxhJREFUWIXt2FuIVlUUwPGfFupkokQPFdVDeCGympKiYIKQUkhEQSHs6TN9rJcIQZGYh6ALXR8q6mmiF40JDXvIeRG8gDfSyJTC0qCaSqEL0RBZ9rD25xzPnHPmu4zjh3x/OJzvrL3WXmvvb+291zl06dIkG3EIf+AMdmDhZY2oQ9mJtWJy7sQ2/ITrqozexy+Yeamjm0QW4TzWN6h/Lf7F8jKF+/Afnmk7tM5jG4bFJIzHjWJi+8oUhvAbeiYktM7ifjH4TQ3ofogjuKqocb7IpvcmLLRqaiLwhyfJH5zAd5haofMafsRtdUFe+UlMwdYC4yExqFU5+RQMpLYXm4m4TZYln41c92TstuBWPFrS7+tYg8X4tsz5YZxTvInfLTa34y5Ox1dTMO9WDquYmtYzqg9vJ/tj6M9cW5J8D55zcUI8ktpeKejzTXHS3V7leKaYpC8qdAaSk1p63pSet6pO5TJq2lt6K5P98zn5hiRfV2AzO7UdzMnfEjXUYtyQucZs/PNTB0MVgd2CEZzCU0n/U0yrGk0FNe1NVH+yX52T1zNqUYndiMicLGXLtj9v/KDR7KjihUwn+3DNOPp1TlcEU3QNNNDn9qQ7Lyf/Gv9geondD2L1NMzVmd8j6T5jHJszmd/r8FeDvt7AnJysFytEgXs613a0gT578SdOZmSzMBdf4u8Sux6j422am8S/s7dC5wlRPgwn3XdadZaoaX3pzTGa1VkeSvIPSuymijF804yz7AY8LLJlQYnuY2I5HMNd+Eq8DpTpX2p60/3znPzedC/LyAWipGkkYy+Qnajz2I3rRepm6cMgvsdSMaGbxdJ9qRmHE0h9ovIDrr/xl53eD6T7rmac5Y/0j9J9aS6gT/C7KNKGk3xQ1F0rRLpPNmUZVX/bvwM3F9gtEfXgx+04n4afcSA9zxXH6K9iueWpF2/7W/RX0/oedVQMOH/qPo6z4pB5Ntc2W2zi21vwN4aNxpb9VwpPG+eLQDPMEC+NOyaisw6iR7zoDrZiXPQJ4Rw+E8XaYVG4XQnME3XVy+IzUpcuXTqf/wEDmchdlP88cQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left(x + \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAE0AAAASCAYAAAAe0VOSAAAABHNCSVQICAgIfAhkiAAAAttJREFUWIXt1k2oVVUUB/Cf8aSUBD/QcuAgMEgUeTppkiBKSYQYNBAi6ooSivFwIDoyHhGkObGRgiRWCA6CgiDwA5MyNbV4Iqk9DCSkRO1D1ExKX4O1L51259578p5XDt4fNufy33uvte46a/3PYgRdYRJW4AOcw01cxSEsx33/X2hd4QUMpbWibuMrk+HvsQtvYAd+Sfz7GFW302HGNBH/NcOUtAVY7J8V9TC+S06fq9tpCRrJ1/wu7YzCfnyLzWpMWjFBB/AR7mRnLmJb+j2/xMbzojIHxRv9GcexrI4Au0CfKIRluNHm3DP+at9Oaw70VAzg9/T8I+PH4V2RpM9wCVOwRLT2FGyq6KNOzMBGvIVPRfJa4Sq2YhW+FjLUxGNYKnR9H05WDaAHp0SmF2V7D4r2zTFVVN3Zqk4KaOiuPXtwAt9gTOL6tW/PZ9P+6xm/LvHLcwedsBGz8DH2ZHvX08rxg/igTKxgv268KtroCTEBVEFveg5k/NwWfFv0iUyfUZ6ACdiAo0LLbvu7BnzVwf551fVkCDs72HtcSMibGd+vfaV9mPYfzfhBIU33F8l2lfaK0ITTWIifsv3Z2IuHcAy78WMK+hG8qLMGbMH4jOsVmviOSGoR7d54j9DXQfEi/w16RcecK3DjMF3o3K0qRtaIzJ8SYl6Gk/hNufa8lu6vruIsQ8Pdadp41St2S8m9zzN78xL/Xu6orNLWCx0bwJO4UnJmmqi0PThYEnxz3Piy5O5w4RbebrE3V+jcIfGBOFLYa+pZ3hWV9WyDyO4J7UV8cjo3iNEFfpJI5JDQggc6OSxBQz3DbRH9Wmtas6tezvjtiX8qv1CstJdEW90WM1dfiYPzQowvi2F4Ab4Qk/dUPI1PxIB8WrTvvY5WldYsmpniv1wou9yvsxYcLJyfLIT3spjJDgvxn5POtmqVTmj4byttQBTK2IxfKqTpV6ytMZYRjGAEw4c/AUYQ23xTLWIdAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 2 a + 4 \\pi$"
      ],
      "text/plain": [
       "2⋅a + 4⋅π"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new, a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFcAAAAYCAYAAACPxmHVAAAABHNCSVQICAgIfAhkiAAAA81JREFUaIHtmH9ollUUxz+ZqdOJS0ud5B+KbgM1pmIkJOQ0h4gUKAj9oe+wP4x0SESiIA0JKpF+IBIEilOEJZNNhn9okVIqlU43pNRRMKOatUqtcIvU+cf3POzx7rnv+z7vnqnl+4WHC+fXPfc855577oU88rhPsRE4BfwJdAJNwPR76tH/CIeBKhTQGUADcBkYnU6pFvgVGDHQ3t3nmA30AC9lKV8I3ASW+gTmALeAV/vt2sBiDFp0A/Ad0AVcA44Dq4FBCc3TAHSgwGVCMfoZz/gEjgBXgYJEXBs4rEEL+RnYB7wF7EK+9wD1wEMJzPOU2duUhex+4CzwcBSzBGXtRwk4lQ1SyPFnc9CtQNvPzdDxwA9md1k/fAvjPHApYq4w3kU/erJP4G1zaoGH/yLKkjbgL+AKOi2r4vsL9C+46bDJ7G536EuMns03M6T3htEqPfO9h0pHWZg42BFaiArylxEGRgJ7UDC/QAfeWOB5tB3HAu94Jr/b+NfGGw79GvAh8DLwDSodAcqAFahmfwK0hngnbHwOdQhhfGB684ELPodGmDPnPPxCtOVcFKMs9hpOgxTJZ+5gtAZfpr1gvDcd+utGXx2hM8p4Xzv0HajHrUCxCb4+h1+JGTiS5SLCuIgyOS5SJB/cbWbzkIdfY/zlDr3O6LM9el2ohw3DV1JqXOW5xvjYY/xRYDMqGVdQ+QgbPOPRC9Cexpmob3cGe1GoNt3z+Bv5RpOZ6tDbUDkZ6tH7ib5lJi3CNbfLxmERck+ijB6HtkYd8LtNNglYyZ01KgrvA0UOrRzV7FoU/DBaMthzsRbVv2/RgfyHR64c+Bv1xgFGAlNQHf7Ho1dAb4xiYwL6o8cjeK1AN9Hbd4vpvZLDnCmSKQvrzc45dLD6UGRyJxz6PKPv9egNQi3q93GcCvdtHejxodSRmYgy95h9rrNBG9YcZ+IEsQG1Qi3oxE5X+8ttdHfZLBt9u6UUXUhi7aZwcHuAz4HH0BYJ0G3jZOCREH0Mqs9PoPIQdxsngc2oN29GpeC3DPJBcF1fg5csX6f0tI1H4zjn9rkH0K2mkt6a1Al8htqNr4BPUfu12Ca7hepcN3cXq1BJuon67uoImXbuPBh9mRscftPQWn50+ItsnoM5ewsMAX5BQQzjcXSB6EQ97Ul0iM1EGb8zx/lS5F5za8jccRxzdFpQkIY79BUo668Drzm8Uegga8zBxz7YSN/r34OMdWR46YqDYeiRoikJY/9xFKDHmPpMglGIehq7gS4EQ4HT9N7TH0RMRX3vVvSUmUceeeTRH9wGOdMFwEn1n3AAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\left(a + 2 \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "         2\n",
       "(a + 2⋅π) "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAA0AAAASCAYAAACAa1QyAAAABHNCSVQICAgIfAhkiAAAAMJJREFUKJHF0j9LQlEYB+DH6BNYhJ/HxcmpD9CgQ0OImxAIbi5u7eLSJji5NzQGDRItDtHQ3J0aSnS4LxJytBMN/eBw4XCe+77nD3/MCdqYYYkPFLhHC0cpdIk13nCLIcZ4j/kpKruojmbijzW8Bjz/TevXgW7s6zORz/h+5VY5xiIqNXLRKMA8F3QCPKOaA64CPClP8Md0AyxwlgN6AR5xmgP6AR4c2MP3Z3GBCVbKSywS619izTaDqHJo3OW0+8/ZALIVMPhgrAZWAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 2$"
      ],
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new, a, a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHEAAAAYCAYAAADNhRJCAAAABHNCSVQICAgIfAhkiAAABEdJREFUaIHtmWuIVVUUx38+SscHjlqWYh8UR5RURiRJSLi+iZCEBMEPesU+KKVGRaIgDiKkImpIBULhI0FDGUMEMynxhfZyZKhJURhNSxufFc1E6vhhrcO9s937nH3uuXYEzx8O57JeZ627zl5r7X0gQ4YMDx1LgO+AP4EmYC8wLFWPMsTGl8AcJHHDgVrgCtArTacCbAH+ALqm7UjKGAW0Aq97yncD7gJTXQLTgY3AEWT5tgKfOWR764NrgXNAM3AbOArMBdqHOPICcA9429PxNJEkTl/UAr8jCYpCXyQvL7kE6lTgL6CB8CTOU/5vwHbgfeBT4JbSdwHtHLoHVK7Cw+m0kSROX4xWW0s9ZD8HTgEdXALjgCp1Kkd4EscjS9p8E58FLqruaxa9wcgq3OThcLmQV39yJeiWGmdcNAAXLM8pxjrkZRroazRHeBLDsFR1N1p4q5Q3IUR/JvLWn0Wqwk1kQptTgi+QLIlhsMX5itJ8rpFFesuVNsXxrPVIyR1iMjomiSAE/+n9joU3EWnMJxy63YGtSNKOIMNPH+BVpIz1AVaX09kEsMV5G/gYmA/8hJTbAEOAGUg//Qo4XcQ7pvdJyERajA9UbxzwSxwHc5S2EjsC9djfqq5IwPUh+t2QUmWiL7IqYwWhyFP+lRgW5zSlrzTo7yl9rsVeD+V9a9A/RIbM8cj/Elw+Q1DJSVyrevssvMHKOxDTZoAzyMqMizzlT2JYnDXKm27Qdyh9lMNmM7IHLIarFNf4OJkjfhIXqk4D9s3oGOXvDLHRE1iGlNubSOktdv7HCB8acQduuzZHBWVBVJx7lF9l0M8iJbiTw+5l7C0oFOXsiW8itftnZGi5YZFp1ntnh40RyCp9BikrO4DrSGADgFm07SM2bAAqDVo10lO3IEkuRl2EPRM+cVYDfyP7ygDdgUFIn/zXYbuCwn9UFuTwX4lvqWw9Mni40E/ljjr4p4EW7GVvheq+4eGPiTzlKac+cVaqzDGDPlbp2xx67ZGt1/mEPrZBDr8kLla5U8BTEbLtkJ7WZOE9p3b2W3iVwK/KfzHiGTbkSZ5E3zhzKveRQV+k9HccekOVvzuuY0mPjJYh+74fkNJyLUK+FTiM/AmDDF6L3gcCTxTReyM9tD9SVuOWv3IgTpzVejf9DL48uCbz4OX8Jq5zZk+cphcUxvwxFJr/NeBd/T0bKXF3kf3cQov9Rh4cHHYjJxxTaNszmoCvkVH6JHAQ2Va8jAR2D+lDLfy/iBtnkESzdwcD0PNIHJcM/mR9xheJvKUwGruuxhiyrcAhyzOeBK4iiTLxNLLRb0L2hMeRYWak2vukxLjylF5Oa4gXZx2SjC6GnRnIIviHwkII0AMZaPaU4F9qWMKDx06PMxYQ8WXiUURn5LB3b9qOPAKoQA61d0UJuuD8nPGQcQfZtHcCvqdwBvk4ogrZN65BPm9lyJAhQ4Z0cB8DGV5OB/pMIgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle 12 \\left(a + 2 \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "            2\n",
       "12⋅(a + 2⋅π) "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new**2, a, 2) # same as above\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMMAAAAWCAYAAAB9jCg2AAAABHNCSVQICAgIfAhkiAAABRtJREFUeJztmmtoHFUUx3/ViFoSiNbEihRRFCw+SCMo/aBs44tSxYjFoohOqIiilqBS9UNhKYJPaouI4gufILVYQf1QLVZMfNeaUrSaaAlSJCTV2lbty2b98L/DTm5mZndezWyYHyy7nDv37pn/3nvPuWcWCgoKGoaHgW+BvcAY8D5w/pR6VNCoNPxc2gD0IKcvANYDI8DJU+lUQUMy7eZSM3AEuHaqHSloeCbMpWOsxsXAM0AfCiUV4M2AgWYBt6PV9QuwH9gD9ANLfcZOixYz9u6Mxo/CLUijCtIiiEXAR8BOpNMO4B1gftYO5oS86hQ6lwaQw/uA7YQvhjtN++/AW8CjwCvAX8a+DpiRouMua4HvgWMzGDsKc9C97iP8R37ctO8CXgIeQ9ocAsbRRJnO5Fmn0Lm0ADgHTeIS4YuhC4UXOwLMBn4zfW9I7O5EVqHFd1bM/g7yq5TQjxnARuBX4EmCf+TZKAyPAO1W2wLTb0dCX7LCIblWedZp0lyyJ/ImYMh8eS0+Qafxccs+AjxvPpcC+t6Moskg2jF2o1N+T8j3PQ3chBbhVE+gZcaPHuCfkOvOQBp/DYxabZvQvbdZ9kVUU4par3mefnE0zZo86gQBc6mpvnuKzGHz/p9PWwvwOvqh+tDNtwPXoTSrHYVML2uAJWiX+CkDf6MwF4XwNcBnSNAghlCYvxg4BaUALpchLd6z+uwBngPuAn5AqYLLuUiHfuBjYKuxx9E0a/KoE8ScSyXC06QgmoBtpu/VPu3NKCzanIZ2ANvBZ9Fhvsv0c1/NEf2C5KG/CdgM/AycaGxlwnPhXhQ9R4EX0NlqLXAAHRbttACg24z5iGVfbuxLLXtUTevBIb5WedUp9lwqEW8xPGX6fRixH0g8O0wGhb5yjPEdki2GlSi39VY3ytSuknQDfzLR/yGU2vjhjrnYsr9t7BdF8NlP03pwiK9VXnWKPZdKRF8My0yf7QQ/yDgJWAF8hfLaI5ZjWyJ8XxjDBN+83+vVGuNdgtK+Jyx7mfAfebnptwod1mYCnegBUMVnPFBKUEHFDC+DKAU93rIn1XSY9LTKs06hpHlmuAflYz8Cl6MVbnMhCnmnAt+gFfwHEuFM4FYm5ndJWA20WrYOlEe/hiaAl4GQsZpQTj6IJl29lFCuvh64z2PfAlxvxrsfFRy8RYEO4G/0/MalBTgb5ccHPfY0NE1LqzzrlIgS9UeGXnPtNvxzO5etKAcs+bStNGPcHcXJiDjEC/2t1L9rrvb0c1PGewPGfZfJJWj3uz63rr3U2N+w7Flp6hBdqzzrVJM0IsODqGowAFzJxEqAlzloF9sAfGq1tVItAX6Xgk9pcxB4OaCtE5Xu+lF+/qWnzQ3TdlkQy37IY+sw7/Zu3mnevbty3jTNq06JKVE7Mqww12ym9p+d2sy1g8BxHvssqnnhYeCEeO7WhUOyA7QfZYJz4RtN2whwutW2EFVP9iMNXNwoe4d1/YvGfpXHlqWmDulqVWbqdKoLOzJ0mxdUS3XzqR6YdgEPmM+3Ua0a9KHDs82wp+8YelDXhR6ubESlv4Xowco4Om8ciHoTOWYdus8rUFHB/ZfkXOAa9IT2IZTjuwTteO5mcx7SaSfTR9OsdYpFmfA8bzjCtRUmh+42dMAaQ/XvL9ABb565PijEpoXD0Y0MoB27F1V69qKD7SjwAf671wDaYGZa9iVoM/qX6oYE2WnqcPQiA2SvU0FBQUFBQUFBQUFBQSL+B32lYd1K9UzDAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 12 a^{2} + 48 \\pi a + 48 \\pi^{2}$"
      ],
      "text/plain": [
       "    2                2\n",
       "12⋅a  + 48⋅π⋅a + 48⋅π "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(diff(MyFun_new**2, a, 2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y, z = var(\"x,y,z\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = sin(x*y) + cos(y*z)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKUAAAAXCAYAAABqKY+kAAAABHNCSVQICAgIfAhkiAAABe9JREFUaIHtmmuIVVUUx38+c5rCESpK0g4kvoIyQqXQSCgiiYoyqT7ILUvKLNIepH1IguxlL7LsYWFfSk0rskKGwpkaySdJZvWl8VF2myydsPLRjLcPa23uvufufc65Z45zp+H+4XLvWXutvdf5r332XnudCzXU0AsQAAVgeYZ9vg38BtRn2GccLkLu4/ZuHLOnozvjkCn/AdlOyvHAcWBeRv1Vgg+APHBKFcbuaahGHDLjfwAwGjirqx0pGoF2oC6j/irBBOQBW1CFsXsaqhGHHsn/SOTpfL2KPnwP7AH6prDNIaRelqE/1UA141DGfzgQ1wCfI0vqUeAXoBmYbekElG/ftiwAVgC/A0eArcDVHoduA/oAKz3tjdrvDSF5Hx2rADypsnl6fb+nr1F6T1+E5CuA4cAVHrsTjQnI/e9D/Msj9z3doTsd8f9P4DCwA5gPnOTQTRJLA18c0nDaoja+T0X8z1KjPPLELAKWAZuBLZZegH9SrkcS5Y3A80jifAToBKY4xtwKdOBPrC9Q2++Afpb8WR3vNUs2UWXvefpq1LHOD8kvV7vFHrso5OjaSnmH+nQU8dtwvh1oCuku0rH2A0uBZ4BvVdYEDLR0k8bSwBeHNJw+ACx0fPZoXwtDfUTyvw0h5wxH22nW7wD/pCwAj4Zsr1T5pyF5PXJDO1zOWFiu9jm9XqDXKyld6QcA/wB7HX3cqDYvOtoGa9vmGD9cyJF+Uo4F/gUOAOc52s+2fl+s4+wFzrTk/YG1lOdlSWMJ0XFIy2kYi1X3Lcp350j+twF/A0NiBgjwT8rdlK5oBnuQ7dzGSLVpjBlvGLJV7QLmqM06SlcGg2Zttw9h9cBPQBtCgAuHgV9j/HAhR/pJ+ZLazk2g+4bqznK0jUR2k1ZLljSWxj4qDmk5BUkJXlH7JXrtgpd/kz/kka33OuB0h16Af1J+6Bm0BSHOhnn6ffmkjScorsQbgJM9emaLu96SPUXpSuvCPmS1iMJuy4ckn+Ux/W1RvdExeiCTrACM8LSbrdFMkKSxhPg4pOW0H5K+FVQ/CiX897cankNWs9nAvcB92mEz8CCSd8Sh3SPvoHzZPqzfgxL0u9/6PRPZUlzYoN8TgfeRgM8FvkII8qHO8seHF4CGkGwccK32vTvUtj2mP9PXvhg9KE62vKc9jxwWGpBDUCWxjItDGk4HAO8A05B07jGPnkES/mkApiLbRifwB8UnLSD69O1Ck7bbGKqylhhfbkHKFXnVXxqhO0R1m/X6M/X/wgibvmrzY4wfLuRIv32nWSnP9bSblTL80EB0LCE+DpVyOgj4mOhTu41U/L9JaVkmIJtJ2Qc5qe8v0y5iKnAM+AYh8gfkcDAqwmYn8BcymQtIThOFMaq3JkbPhRzdk1MuU92ZjrYRlOeUPoRjCcnikJTTeqQMdRy4K4E/EMP/FNyJqDndXaXXAdlMSoDV+HOlScg23UoxyZ5GdO4KUiYqAIcQouOS/VtVf06Mngs5sjl9j3W026fvS3ScXZSucv0QLgrAI5Y8aSwNouIAyTgdjGz1HcAMTz8uRPLfDvysDi5GaoGb1WArkidAtpPyZpXfHZKPU3/ylG9ZZtub7BlrBsXDRpKX/e8iRA5LoBtGjq7XKTuR8s0q4HHgVWS7Xh/SNYeLNuBl4GmkjFMAvqS0GpE0lga+OBgk4fQTbd+Eu065EHeRP5L/O5EX5K3ICnUA+Bp4CDjV0gvIblIOREjeZMlGIOWBg5QXuqFYbN3oGWsyxbqXrwRhMBhJsKNW3ijk6NqkBDn9rkG20GPIm5d1yK4Qxk1I7ncIeSmxE1khw4eUpLE0cMXBRhynfdWnqGpEm8Ouq/yfMMxHnI46jFSCj5DVZ3wC3Xt07EkZjf1/RlQcKuG0EvRY/gchp8e1GfRlEvElCXTrkFVpdQbj9gb44lAJp5Wgx/N/KVLPSvPn0uHAw0jJ4yjyPthXXLcxBslzghRj9laYOJxDOk4rQa/m3/z54CByWBhaXXd6BWqc1lBDDTXUUEMNleA/g7MxJgnegfkAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\sin{\\left(x y \\right)} + \\cos{\\left(y z \\right)}$"
      ],
      "text/plain": [
       "sin(x⋅y) + cos(y⋅z)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Untitled2.ipynb...

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
def my_squares(iters):
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 92.5

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.60753s

======================================================================
Inspecting script file timeitme.py...

File contents are:
**********************************************************************
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

# %timeit my_squares_loops(iters)
# %timeit my_squares_lc(iters)


##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join

# %timeit(my_join_join(iters, mystring))
# %timeit(my_join(iters, mystring))**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 90.5

Output (only first 500 characters): 

**********************************************************************
10000000 My string
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 9.94734s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
import re

# Read the file (using a different, more python 3 way, just for fun!)
with open('../data/blackbirds.txt', 'r') as f:
    text = f.read()

# replace \t's and \n's with a spaces:
text = text.replace('\t',' ')
text = text.replace('\n',' ')
# You may want to make other changes to the text. 

# In particular, note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform to ASCII:

text = text.encode('ascii', 'ignore') # first encode into ascii bytes
text = text.decode('ascii', 'ignore') # Now decode back to string

# Now extend this script so that it captures the Kingdom, Phylum and Species
# name for each species and prints it out to screen neatly.
found_species = re.findall(r"Species(.+?)\s\s\s", text)
found_species
found_kingdom = re.findall(r"Kingdom(.+?)\s\s\s", text)
found_kingdom
found_phylum = re.findall(r"Phylum(.+?)\s\s\s", text)
found_phylum
# Hint: you may want to use re.findall(my_reg, text)... Keep in mind that there
# are multiple ways to skin this cat! Your solution could involve multiple
# regular expression calls (easier!), or a single one (harder!)**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 88.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "blackbirds.py", line 4, in <module>
    with open('../data/blackbirds.txt', 'r') as f:
FileNotFoundError: [Errno 2] No such file or directory: '../data/blackbirds.txt'

======================================================================
Inspecting script file Nets.py...

File contents are:
**********************************************************************
import networkx as nx
import scipy as sc
import matplotlib.pyplot as p
import pandas as pd
import numpy as np


f1 = pd.read_csv('../Data/QMEE_Net_Mat_edges.csv', sep=',')
f2 = pd.read_csv('../Data/QMEE_Net_Mat_nodes.csv')


f1.index=['ICL','UoR','CEH','ZSL','CEFAS','NonAc']
f1Data = pd.DataFrame(f1)

index = pd.DataFrame(f1Data.index[np.where(f1Data!=0)[0]])
col = pd.DataFrame(f1Data.columns[np.where(f1Data!=0)[1]])
Lnk = [0,1]
ALst = []
index[0][0]
col[0][17]

for i in range(18):
    Lnk[0] = index[0][i]
    Lnk[1] = col[0][i]
    print(i)
    print(Lnk)
    ALst.append(Lnk)
    print(ALst)

print(ALst)







**********************************************************************

Testing Nets.py...

Nets.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 86.5

Output (only first 500 characters): 

**********************************************************************
0
['ICL', 'CEH']
[['ICL', 'CEH']]
1
['ICL', 'ZSL']
[['ICL', 'ZSL'], ['ICL', 'ZSL']]
2
['ICL', 'CEFAS']
[['ICL', 'CEFAS'], ['ICL', 'CEFAS'], ['ICL', 'CEFAS']]
3
['ICL', 'NonAc']
[['ICL', 'NonAc'], ['ICL', 'NonAc'], ['ICL', 'NonAc'], ['ICL', 'NonAc']]
4
['UoR', 'CEH']
[['UoR', 'CEH'], ['UoR', 'CEH'], ['UoR', 'CEH'], ['UoR', 'CEH'], ['UoR', 'CEH']]
5
['UoR', 'CEFAS']
[['UoR', 'CEFAS'], ['UoR', 'CEFAS'], ['UoR', 'CEFAS'], ['UoR', 'CEFAS'], ['UoR', 'CEFAS'], ['UoR', 'CEFAS']]
6
['UoR', 'NonAc']
[['UoR
**********************************************************************

Code ran without errors

Time consumed = 0.64654s

======================================================================
Inspecting script file TestR.R...

File contents are:
**********************************************************************
print("Hello, this is R!")**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.10219s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
def my_squares(iters):
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 83.0

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.43025s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../Result/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.17199s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:
**********************************************************************
**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
""" This is blah blah"""

# Use the subprocess.os module to get a list of files and directories 
# in your ubuntu home directory 


# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

import subprocess
import os
import re

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")
home
# Create a list to store the results.
FilesDirsStartingWithC = []
DirsStartingWithC = []
# Use a for loop to walk through the home directory.
#################################
# Get files and directories in your home/ that start with either an 
# upper or lower case 'C'
# Type your code here:
for (dir, subdir, files) in subprocess.os.walk(home):
    for i in files:
        if i.startswith('C') or i.startswith('c'):
            FilesDirsStartingWithC.append(i)
    
    for i in dir:
        if i.startswith('C') or i.startswith('c'):
            FilesDirsStartingWithC.append(i)

print("finish")

#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 

# Type your code here:
for (dir, subdir, files) in subprocess.os.walk(home):
    for i in dir:
        if i.startswith('C') or i.startswith('c'):
            DirsStartingWithC.append(i)

print("finish")
**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 83.0

Output (only first 500 characters): 

**********************************************************************
finish
finish

**********************************************************************

Code ran without errors

Time consumed = 6.66129s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p

def dCR_dt(pops, t=0):

    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return sc.array([dRdt, dCdt])
r = 1.
a = 0.1 
z = 1.5
e = 0.75
t = sc.linspace(0, 15, 1000)
R0 = 10
C0 = 5 
RC0 = sc.array([R0, C0])
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

f2 = p.figure()
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.show()# To display the figure
f2.savefig('../Result/LV_model.pdf') #Save figure

f1 = p.figure()
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
p.plot(pops[:,0], pops[:,1],'r-')
f1.savefig('../Result/LV1.pdf') #Save figure**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 80.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00937s

======================================================================
Inspecting script file Untitled3.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "a <- 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "4"
      ],
      "text/latex": [
       "4"
      ],
      "text/markdown": [
       "4"
      ],
      "text/plain": [
       "[1] 4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "4"
      ],
      "text/latex": [
       "4"
      ],
      "text/markdown": [
       "4"
      ],
      "text/plain": [
       "[1] 4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in eval(expr, envir, enclos): object 'b' not found\n",
     "output_type": "error",
     "traceback": [
      "Error in eval(expr, envir, enclos): object 'b' not found\nTraceback:\n"
     ]
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'b' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-89e6c98d9288>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'b' is not defined"
     ]
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in eval(expr, envir, enclos): object 'a' not found\n",
     "output_type": "error",
     "traceback": [
      "Error in eval(expr, envir, enclos): object 'a' not found\nTraceback:\n"
     ]
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] \"this is python!\"\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Untitled3.ipynb...

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
import networkx as nx
import scipy as sc
import matplotlib.pyplot as p

def GenRdmAdjList(N = 2, C = 0.5):
    Ids = range(N)
    ALst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C:
           Lnk = sc.random.choice(Ids,2).tolist()
            if Lnk[0] != Lnk[1]: #avoid self (e.g., cannibalistic) loops
                ALst.append(Lnk)

    return ALst


MaxN = 30
C = 0.75
AdjL = sc.array(GenRdmAdjList(MaxN, C))
AdjL
Sps = sc.unique(AdjL) # get species ids
SizRan = ([-10,10]) #use log10 scale
Sizs = sc.random.uniform(SizRan[0],SizRan[1],MaxN)
pos = nx.circular_layout(Sps)
G = nx.Graph()
G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL))
NodSizs= 1000 * (Sizs-min(Sizs))/(max(Sizs)-min(Sizs)) 
nx.draw_networkx(G, pos, node_size = NodSizs)
p.savefig('../Result/network.pdf') #Save figure**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 78.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
  File "DrawFW.py", line 11
    if Lnk[0] != Lnk[1]: #avoid self (e.g., cannibalistic) loops
    ^
IndentationError: unexpected indent

======================================================================
Inspecting script file Nets.R...

File contents are:
**********************************************************************
library(igraph) # Load the igraph package

rm(list = ls())

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)

net1 <- as.matrix(links)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)

#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 

# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]

# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9

V(net)$size <- 50

# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight

#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"

E(net)$width <- 1+E(net)$weight/10

graphics.off()


plot(net, edge.curved=0, vertex.label.color="black") 

legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
       col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)

svg("../Result/QMEENet.svg",width=7,height=7)

dev.off()
**********************************************************************

Testing Nets.R...

Output (only first 500 characters): 

**********************************************************************
pdf 
  2 

**********************************************************************

Encountered error (or warning):
Loading required package: methods

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


======================================================================
Inspecting script file Untitled.ipynb...

File contents are:
**********************************************************************
{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Untitled.ipynb...

======================================================================
Inspecting script file run_fmr_R.py...

File contents are:
**********************************************************************
import subprocess
subprocess.Popen("Rscript --verbose fmr.R > ../Result/fmrR.Rout 2> ../Result/fmrR_errFile.Rout", shell=True).wait()**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 76.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.20446s

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p
import sys


def dCR_dt(pops, t=0):

    R = pops[0]
    C = pops[1]
    dRdt = r * R * (1- R/K) - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return sc.array([dRdt, dCdt])

if len(sys.argv) != 1:
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])

elif len(sys.argv) == 1:
    r = 1.
    a = 0.1 
    z = 1.5
    e = 0.75


t = sc.linspace(0, 15, 1000)
R0 = 10
C0 = 5 
K = 20
RC0 = sc.array([R0, C0])
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

f2 = p.figure()
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.show()# To display the figure
f2.savefig('../Result/LV2_model.pdf') #Save figure

f1 = p.figure()
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
p.plot(pops[:,0], pops[:,1],'b-')
p.show()# To display the figure
f1.savefig('../Result/LV2.pdf') #Save figure**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 73.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.01216s

======================================================================
Inspecting script file Untitled3-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Untitled3-checkpoint.ipynb...

======================================================================
Inspecting script file Untitled-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Untitled-checkpoint.ipynb...

======================================================================
Inspecting script file Untitled2-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Untitled2-checkpoint.ipynb...

======================================================================
Inspecting script file Untitled1-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Untitled1-checkpoint.ipynb...

======================================================================
======================================================================
Finished running scripts

Ran into 3 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 73.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!